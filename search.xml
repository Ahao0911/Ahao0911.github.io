<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MyBatis-Plus笔记</title>
      <link href="/2023/01/05/MyBatis-Plus%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/05/MyBatis-Plus%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Mybatis-Plus笔记"><a href="#Mybatis-Plus笔记" class="headerlink" title="Mybatis-Plus笔记"></a>Mybatis-Plus笔记</h1><blockquote><p>三更草堂老师</p></blockquote><hr><h2 id="1-概述："><a href="#1-概述：" class="headerlink" title="1.概述："></a>1.概述：</h2><ul><li>MybatisPlus：是一款Mybatis增强工具，用于简化开发，提高效率。它在MyBatis的基础上只做增强不做改变，为简化开发、提高效率而生。</li><li>官网：<a href="https://mp.baomidou.com/">https://mp.baomidou.com/</a></li></ul><hr><h2 id="2-快速入门："><a href="#2-快速入门：" class="headerlink" title="2.快速入门："></a>2.快速入门：</h2><ol><li><p>准备工作：</p><ul><li><p>准备数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `user_name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">  `address` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地址&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">5</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `<span class="keyword">user</span>`(`id`,`user_name`,`password`,`name`,`age`,`address`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;ruiwen&#x27;</span>,<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;瑞文&#x27;</span>,<span class="number">12</span>,<span class="string">&#x27;山东&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;gailun&#x27;</span>,<span class="string">&#x27;1332&#x27;</span>,<span class="string">&#x27;盖伦&#x27;</span>,<span class="number">13</span>,<span class="string">&#x27;平顶山&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;timu&#x27;</span>,<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;提姆&#x27;</span>,<span class="number">22</span>,<span class="string">&#x27;蘑菇石&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;daji&#x27;</span>,<span class="string">&#x27;1222&#x27;</span>,<span class="string">&#x27;妲己&#x27;</span>,<span class="number">221</span>,<span class="string">&#x27;狐山&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建springboot工程</p><ul><li><p>添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SGApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SGApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用MybatisPlus</p><ul><li><p>添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置数据库信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mp_db?characterEncoding=utf-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure></li><li><p>创建Mapper接口：创建Mapper接口继承BaseMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BaseMapper接口中已经提供了很多常用方法。所以我们只需要直接从容器中获取Mapper就可以进行操作了，不需要自己去编写Sql语句。</p></li><li><p>配置Mapper扫描：在启动类上配置我们的Mapper在哪个包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.sangeng.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SGApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SGApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>获取Mapper进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MPTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryList</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(userMapper.selectList(<span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h2 id="3-常用设置："><a href="#3-常用设置：" class="headerlink" title="3.常用设置："></a>3.常用设置：</h2><ul><li>默认情况下MP操作的表名就是实体类的类名，但是如果表名和类名不一致就需要我们自己设置映射规则。</li></ul><h3 id="3-1设置表映射规则"><a href="#3-1设置表映射规则" class="headerlink" title="3.1设置表映射规则"></a>3.1设置表映射规则</h3><ol><li><p>单独设置：可以在实体类的类名上加上@TableName注解进行标识。</p><ul><li><p>例如：如果表名是tb_user，而实体类名是User则可以使用以下写法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>全局设置：全局表名设置前缀，一般一个项目表名的前缀都是统一风格的，这个时候如果一个一个在实体类上设置注解就太麻烦了。我们可以通过配置来设置全局的表名前缀。</p><ul><li><p>例如：如果一个项目中所有的表名相比于类名都是多了个前缀： <code>tb_</code> 。这可以使用如下方式配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment">#表名前缀</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">tb_</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="3-2设置主键生成策略"><a href="#3-2设置主键生成策略" class="headerlink" title="3.2设置主键生成策略"></a>3.2设置主键生成策略</h3><ol><li><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUserName(<span class="string">&quot;三更草堂222&quot;</span>);</span><br><span class="line">    user.setPassword(<span class="string">&quot;7777&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">    System.out.println(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>​结果会是用户id是由算法生成的一长串数字。</p><ol start="2"><li><p>单独设置：</p><ul><li>默认情况下使用MP插入数据时，如果在我们没有设置主键生成策略的情况下默认的策略是基于雪花算法的自增id。</li><li>如果我们需要使用别的策略可以在定义实体类时，在代表主键的字段上加上<code>@TableId</code>注解，使用其<code>type</code>属性指定主键生成策略。</li><li>例如：我们要设置主键自动增长则可以设置如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"><span class="comment">//.....</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>全部主键策略定义在了枚举类<code>IdType</code>中，<code>IdType</code>有如下的取值：</p><ul><li><p><code>AUTO</code></p><p>数据库ID自增，<strong>依赖于数据库</strong>。该类型请确保数据库设置了 ID自增 否则无效</p></li><li><p><code>NONE</code></p><p>未设置主键类型。若在代码中没有手动设置主键，则会根据<strong>主键的全局策略</strong>自动生成（默认的主键全局策略是基于雪花算法的自增ID）</p></li><li><p><code>INPUT</code></p><p>需要手动设置主键，若不设置。插入操作生成SQL语句时，主键这一列的值会是<code>null</code>。</p></li><li><p><code>ASSIGN_ID</code></p><p>当没有手动设置主键，即实体类中的主键属性为空时，才会自动填充，使用雪花算法</p></li><li><p><code>ASSIGN_UUID</code></p><p>当实体类的主键属性为空时，才会自动填充，使用UUID</p></li></ul></li></ul></li><li><p>全局设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment"># id生成策略 auto为数据库自增</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="3-3设置字段映射关系"><a href="#3-3设置字段映射关系" class="headerlink" title="3.3设置字段映射关系"></a>3.3设置字段映射关系</h3><ol><li><p>默认情况下MP会开启字段名列名的驼峰映射， 即从经典数据库列名 A_COLUMN（下划线命名） 到经典 Java 属性名 aColumn（驼峰命名） 的类似映射 。如果需要关闭我们可以使用如下配置进行关闭。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line"><span class="comment">#是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN（下划线命名） 到经典 Java 属性名 aColumn（驼峰命名） 的类似映射</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>有些时候自动映射不过去：</p><ul><li>默认情况下MP会根据实体类的属性名去映射表的列名。如果数据库的列表和实体类的属性名不一致了我们可以使用<code>@TableField</code>注解的<code>value</code>属性去设置映射关系。</li><li>例如：如果表中一个列名叫 address而 实体类中的属性名为addressStr则可以使用如下方式进行配置。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(&quot;address&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String addressStr;</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-4日志"><a href="#3-4日志" class="headerlink" title="3.4日志"></a>3.4日志</h3><ol><li><p>如果需要打印MP操作对应的SQL语句等，可以配置日志输出。配置方式如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># 日志</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="4-基本使用（CRUD）"><a href="#4-基本使用（CRUD）" class="headerlink" title="4.基本使用（CRUD）"></a>4.基本使用（CRUD）</h2><h3 id="4-1插入数据："><a href="#4-1插入数据：" class="headerlink" title="4.1插入数据："></a>4.1插入数据：</h3><ol><li>我们可以使用insert方法来实现数据的插入，示例：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUserName(<span class="string">&quot;三更草堂333&quot;</span>);</span><br><span class="line">    user.setPassword(<span class="string">&quot;7777888&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">    System.out.println(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2删除操作："><a href="#4-2删除操作：" class="headerlink" title="4.2删除操作："></a>4.2删除操作：</h3><ol><li>我们可以使用<strong>deleteXXX</strong>方法来实现数据的删除，示例：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Integer&gt; ids = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    ids.add(<span class="number">5</span>);</span><br><span class="line">    ids.add(<span class="number">6</span>);</span><br><span class="line">    ids.add(<span class="number">7</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.deleteBatchIds(ids);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.deleteById(<span class="number">8</span>);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteByMap</span><span class="params">()</span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;提姆&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>,<span class="number">22</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.deleteByMap(map);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-更新操作："><a href="#4-3-更新操作：" class="headerlink" title="4.3 更新操作："></a>4.3 更新操作：</h3><ol><li>我们可以使用<strong>updateXXX</strong>方法来实现数据的删除，示例：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//把id为2的用户的年龄改为14</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">2L</span>);</span><br><span class="line">    user.setAge(<span class="number">14</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.updateById(user);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4查询操作："><a href="#4-4查询操作：" class="headerlink" title="4.4查询操作："></a>4.4查询操作：</h3><ul><li>之前快速入门那个示例就是</li></ul><h2 id="5-条件构造器Wrapper（重点）"><a href="#5-条件构造器Wrapper（重点）" class="headerlink" title="5.条件构造器Wrapper（重点）"></a>5.条件构造器Wrapper（重点）</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><ul><li>我们在实际操作数据库的时候会涉及到很多的<strong>条件</strong>。所以MP为我们提供了一个功能强大的条件构造器 <code>Wrapper</code> 。使用它可以让我们非常方便的构造条件。</li><li>其继承体系如下：</li></ul><p>​<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20230104212143886.png" alt="image-20230104212143886"></p><ul><li>在其子类<code>AbstractWrapper</code>中提供了很多用于构造Where条件的方法。</li><li><code>AbstractWrapper</code>的子类<code>QueryWrapper</code>则额外提供了用于针对Select语法的<code>select</code>方法。可以用来设置查询哪些列。</li><li><code>AbstractWrapper</code>的子类<code>UpdateWrapper</code>则额外提供了用于针对SET语法的<code>set</code>方法。可以用来设置对哪些列进行更新。</li><li>完整的AbstractWrapper方法可以参照：<a href="https://baomidou.com/guide/wrapper.html#abstractwrapper">https://baomidou.com/guide/wrapper.html#abstractwrapper</a></li><li>介绍是用来干什么的。它的实现类有哪些：QueryWrapper,UpdateWrapper，【LambdaQueryWrapper】</li></ul><h3 id="5-2-常用AbstractWrapper方法（重点）"><a href="#5-2-常用AbstractWrapper方法（重点）" class="headerlink" title="5.2 常用AbstractWrapper方法（重点）"></a>5.2 常用AbstractWrapper方法（重点）</h3><blockquote><p>eq：equals，等于<br>gt：greater than ，大于 &gt;<br>ge：greater than or equals，大于等于≥<br>lt：less than，小于&lt;<br>le：less than or equals，小于等于≤<br>between：相当于SQL中的BETWEEN<br>like：模糊匹配。like(“name”,”黄”)，相当于SQL的name like ‘%黄%’<br>likeRight：模糊匹配右半边。likeRight(“name”,”黄”)，相当于SQL的name like ‘黄%’<br>likeLeft：模糊匹配左半边。likeLeft(“name”,”黄”)，相当于SQL的name like ‘%黄’<br>notLike：notLike(“name”,”黄”)，相当于SQL的name not like ‘%黄%’<br>isNull<br>isNotNull<br>and：SQL连接符AND<br>or：SQL连接符OR</p><p>in: in(“age”,{1,2,3})相当于 age in(1,2,3)</p><p>groupBy: groupBy(“id”,”name”)相当于 group by id,name</p><p>orderByAsc :orderByAsc(“id”,”name”)相当于 order by id ASC,name ASC</p><p>orderByDesc :orderByDesc (“id”,”name”)相当于 order by id DESC,name DESC</p></blockquote><h4 id="1-示例一"><a href="#1-示例一" class="headerlink" title="1. 示例一"></a>1. 示例一</h4><ul><li>SQL语句如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">id,user_name,PASSWORD,NAME,age,address </span><br><span class="line">FROM </span><br><span class="line">USER </span><br><span class="line">WHERE </span><br><span class="line">age &gt; 18 AND address = &#x27;狐山&#x27;</span><br></pre></td></tr></table></figure><ul><li>如果用Wrapper写法如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWrapper01</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">QueryWrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">    wrapper.gt(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    wrapper.eq(<span class="string">&quot;address&quot;</span>,<span class="string">&quot;狐山&quot;</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">    System.out.println(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-示例二"><a href="#2-示例二" class="headerlink" title="2. 示例二"></a>2. 示例二</h4><ul><li>SQL语句如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">id,user_name,PASSWORD,NAME,age,address </span><br><span class="line">FROM </span><br><span class="line">USER </span><br><span class="line">WHERE </span><br><span class="line">id IN(1,2,3) AND </span><br><span class="line">age BETWEEN 12 AND 29 AND </span><br><span class="line">address LIKE &#x27;%山%&#x27;</span><br></pre></td></tr></table></figure><ul><li>如果用Wrapper写法如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWrapper02</span><span class="params">()</span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.in(<span class="string">&quot;id&quot;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    wrapper.between(<span class="string">&quot;age&quot;</span>,<span class="number">12</span>,<span class="number">29</span>);</span><br><span class="line">    wrapper.like(<span class="string">&quot;address&quot;</span>,<span class="string">&quot;山&quot;</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">    System.out.println(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-示例三"><a href="#3-示例三" class="headerlink" title="3. 示例三"></a>3. 示例三</h4><ul><li>SQL语句如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">id,user_name,PASSWORD,NAME,age,address </span><br><span class="line">FROM </span><br><span class="line">USER </span><br><span class="line">WHERE </span><br><span class="line">id IN(1,2,3) AND </span><br><span class="line">age &gt; 10 </span><br><span class="line">ORDER BY </span><br><span class="line">age DESC</span><br></pre></td></tr></table></figure><ul><li>如果用Wrapper写法如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWrapper03</span><span class="params">()</span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.in(<span class="string">&quot;id&quot;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    queryWrapper.gt(<span class="string">&quot;age&quot;</span>,<span class="number">10</span>);</span><br><span class="line">    queryWrapper.orderByDesc(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    System.out.println(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-常用QueryWrapper方法"><a href="#5-3-常用QueryWrapper方法" class="headerlink" title="5.3 常用QueryWrapper方法"></a>5.3 常用QueryWrapper方法</h3><pre><code> QueryWrapper的 select 可以设置要查询的列。</code></pre><h4 id="1-示例一-1"><a href="#1-示例一-1" class="headerlink" title="1. 示例一"></a>1. 示例一</h4><blockquote><p>select(String… sqlSelect) 方法的测试为要查询的列名</p></blockquote><ul><li>SQL语句如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">id,user_name</span><br><span class="line">FROM </span><br><span class="line">USER </span><br></pre></td></tr></table></figure><ul><li>MP写法如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelect01</span><span class="params">()</span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.select(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;user_name&quot;</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    System.out.println(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-示例二-1"><a href="#2-示例二-1" class="headerlink" title="2. 示例二"></a>2. 示例二</h4><blockquote><p>select(Class<T> entityClass, Predicate<TableFieldInfo> predicate)</p></blockquote><ul><li><p>方法的第一个参数为实体类的字节码对象，第二个参数为Predicate类型，可以使用lambda的写法，过滤要查询的字段 (主键除外) 。</p></li><li><p>SQL语句如下：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">id,user_name</span><br><span class="line">FROM </span><br><span class="line">USER </span><br></pre></td></tr></table></figure><ul><li>MP写法如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelect02</span><span class="params">()</span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.select(User.class, <span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;TableFieldInfo&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(TableFieldInfo tableFieldInfo)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;user_name&quot;</span>.equals(tableFieldInfo.getColumn());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    System.out.println(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>函数式编程</li></ul><h4 id="3-示例三-1"><a href="#3-示例三-1" class="headerlink" title="3. 示例三"></a>3. 示例三</h4><blockquote><p>select(Predicate<TableFieldInfo> predicate)</p></blockquote><ul><li><p>方法第一个参数为Predicate类型，可以使用lambda的写法，过滤要查询的字段 (主键除外) 。</p></li><li><p>SQL语句如下：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">id,user_name,PASSWORD,NAME,age </span><br><span class="line">FROM </span><br><span class="line">USER</span><br></pre></td></tr></table></figure><ul><li><p>就是不想查询address这列，其他列都查询了：在匿名内部类加一个！就好，这种写法的优点就是写不要什么什么，相比传统方式效率高。</p></li><li><p>注意需要传入一个类型为T的entity属性，也就是实体类<code>new User()</code>。</p></li><li><p>MP写法如下：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelect03</span><span class="params">()</span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">User</span>());</span><br><span class="line">    queryWrapper.select(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;TableFieldInfo&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(TableFieldInfo tableFieldInfo)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> !<span class="string">&quot;address&quot;</span>.equals(tableFieldInfo.getColumn());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    System.out.println(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-常用UpdateWrapper方法"><a href="#5-4-常用UpdateWrapper方法" class="headerlink" title="5.4 常用UpdateWrapper方法"></a>5.4 常用UpdateWrapper方法</h3><ul><li>我们前面在使用update方法时需要创建一个实体类对象传入，用来指定要更新的列及对应的值。但是如果需要更新的列比较少时，创建这么一个对象显的有点麻烦和复杂。</li><li>我们可以使用UpdateWrapper的set方法来设置要更新的列及其值。同时这种方式也可以使用Wrapper去指定更复杂的更新条件。</li></ul><h4 id="1-示例"><a href="#1-示例" class="headerlink" title="1. 示例"></a>1. 示例</h4><ul><li>SQL语句如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UPDATE </span><br><span class="line">USER</span><br><span class="line">SET </span><br><span class="line">age = 99</span><br><span class="line">where </span><br><span class="line">id &gt; 1</span><br></pre></td></tr></table></figure><ul><li>我们想把id大于1的用户的年龄修改为99，则可以使用如下写法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateWrapper</span><span class="params">()</span>&#123;</span><br><span class="line">    UpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    updateWrapper.gt(<span class="string">&quot;id&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    updateWrapper.set(<span class="string">&quot;age&quot;</span>,<span class="number">99</span>);</span><br><span class="line">    userMapper.update(<span class="literal">null</span>,updateWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-Lambda条件构造器"><a href="#5-5-Lambda条件构造器" class="headerlink" title="5.5 Lambda条件构造器"></a>5.5 Lambda条件构造器</h3><ul><li><p>我们前面在使用条件构造器时列名都是用字符串的形式去指定。这种方式无法在编译期确定列名的合法性。</p></li><li><p>所以MP提供了一个Lambda条件构造器可以让我们直接以实体类的方法引用的形式来指定列名。这样就可以弥补上述缺陷。</p></li><li><p>也就是编译期间就知道如列名写没写对</p></li></ul><h4 id="1-示例-1"><a href="#1-示例-1" class="headerlink" title="1. 示例"></a>1. 示例</h4><ul><li>要执行的查询对应的SQL如下</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">id,user_name,PASSWORD,NAME,age,address </span><br><span class="line">FROM </span><br><span class="line">USER </span><br><span class="line">WHERE </span><br><span class="line">age &gt; 18 AND address = &#x27;狐山&#x27;</span><br></pre></td></tr></table></figure><ul><li>如果使用之前的条件构造器写法如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLambdaWrapper</span><span class="params">()</span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">    queryWrapper.gt(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;address&quot;</span>,<span class="string">&quot;狐山&quot;</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果使用Lambda条件构造器写法如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLambdaWrapper2</span><span class="params">()</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.gt(User::getAge,<span class="number">18</span>);</span><br><span class="line">    queryWrapper.eq(User::getAddress,<span class="string">&quot;狐山&quot;</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-自定义SQL"><a href="#6-自定义SQL" class="headerlink" title="6.自定义SQL"></a>6.自定义SQL</h2><ul><li>虽然MP为我们提供了很多常用的方法，并且也提供了条件构造器。但是如果真的遇到了复制的SQL时，我们还是需要自己去定义方法，自己去写对应的SQL，这样SQL也更有利于后期维护。</li><li>因为MP是对mybatis做了增强，所以还是支持之前Mybatis的方式去自定义方法。</li><li>同时也支持在使用Mybatis的自定义方法时使用MP的条件构造器帮助我们进行条件构造。</li><li>接下去我们分别来讲讲。</li></ul><h3 id="6-0-准备工作"><a href="#6-0-准备工作" class="headerlink" title="6.0 准备工作"></a>6.0 准备工作</h3><ul><li>准备数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `orders` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `price` int(11) DEFAULT NULL COMMENT &#x27;价格&#x27;,</span><br><span class="line">  `remark` varchar(100) DEFAULT NULL COMMENT &#x27;备注&#x27;,</span><br><span class="line">  `user_id` int(11) DEFAULT NULL COMMENT &#x27;用户id&#x27;,</span><br><span class="line">  `update_time` timestamp NULL DEFAULT NULL COMMENT &#x27;更新时间&#x27;,</span><br><span class="line">  `create_time` timestamp NULL DEFAULT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `version` int(11) DEFAULT &#x27;1&#x27; COMMENT &#x27;版本&#x27;,</span><br><span class="line">  `del_flag` int(1) DEFAULT &#x27;0&#x27; COMMENT &#x27;逻辑删除标识,0-未删除,1-已删除&#x27;,</span><br><span class="line">  `create_by` varchar(100) DEFAULT NULL COMMENT &#x27;创建人&#x27;,</span><br><span class="line">  `update_by` varchar(100) DEFAULT NULL COMMENT &#x27;更新人&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">/*Data for the table `orders` */</span><br><span class="line"></span><br><span class="line">insert  into `orders`(`id`,`price`,`remark`,`user_id`,`update_time`,`create_time`,`version`,`del_flag`,`create_by`,`update_by`) values (1,2000,&#x27;无&#x27;,2,&#x27;2021-08-24 21:02:43&#x27;,&#x27;2021-08-24 21:02:46&#x27;,1,0,NULL,NULL),(2,3000,&#x27;无&#x27;,3,&#x27;2021-08-24 21:03:32&#x27;,&#x27;2021-08-24 21:03:35&#x27;,1,0,NULL,NULL),(3,4000,&#x27;无&#x27;,2,&#x27;2021-08-24 21:03:39&#x27;,&#x27;2021-08-24 21:03:41&#x27;,1,0,NULL,NULL);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>创建实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orders</span>  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 备注</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 版本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 逻辑删除标识,0-未删除,1-已删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer delFlag;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-1-Mybatis方式"><a href="#6-1-Mybatis方式" class="headerlink" title="6.1 Mybatis方式"></a>6.1 Mybatis方式</h3><h4 id="1-定义方法"><a href="#1-定义方法" class="headerlink" title="1. 定义方法"></a>1. 定义方法</h4><ul><li>在Mapper接口中定义方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">    User <span class="title function_">findMyUser</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-创建xml"><a href="#2-创建xml" class="headerlink" title="2.创建xml"></a>2.创建xml</h4><ul><li>先配置xml文件的存放目录</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/mapper/**/*.xml</span></span><br></pre></td></tr></table></figure><ul><li>创建对应的xml映射文件</li></ul><h4 id="3-在xml映射文件中编写SQL"><a href="#3-在xml映射文件中编写SQL" class="headerlink" title="3. 在xml映射文件中编写SQL"></a>3. 在xml映射文件中编写SQL</h4><ul><li>创建对应的标签，编写对应的SQL语句</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.sangeng.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findMyUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sangeng.domian.User&quot;</span>&gt;</span></span><br><span class="line">       select * from user where id = #&#123;id&#125; </span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2-Mybatis方式结合条件构造器"><a href="#6-2-Mybatis方式结合条件构造器" class="headerlink" title="6.2 Mybatis方式结合条件构造器"></a>6.2 Mybatis方式结合条件构造器</h3><ul><li>我们在使用上述方式自定义方法时，如果也希望我们的自定义方法能像MP自带方法一样使用条件构造器来进行条件构造的话只需要使用如下方式即可。</li><li>也就是我们可以自定义wapper，但是要注意拼接sql语句。</li></ul><ol><li>方法定义中添加Warpper类型的参数</li></ol><ul><li>添加Warpper类型的参数，并且要注意给其指定参数名。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">    User <span class="title function_">findMyUserByWrapper</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;User&gt; wrapper)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在SQL语句中获取Warpper拼接的SQL片段进行拼接。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findMyUserByWrapper&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sangeng.domian.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user $&#123;ew.customSqlSegment&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意：不能使用#{}应该用${}</li><li>二者区别：${}有预编译（提示）功能，#{}没有</li></ul><h2 id="7-分页查询"><a href="#7-分页查询" class="headerlink" title="7.分页查询"></a>7.分页查询</h2><h3 id="7-1-基本分页查询"><a href="#7-1-基本分页查询" class="headerlink" title="7.1 基本分页查询"></a>7.1 基本分页查询</h3><ol><li>配置分页查询拦截器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3.4.0之前的版本</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="comment">/* @Bean</span></span><br><span class="line"><span class="comment">    public PaginationInterceptor paginationInterceptor()&#123;</span></span><br><span class="line"><span class="comment">        return  new PaginationInterceptor();</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3.4.0之后版本</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">       mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">       <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>进行分页查询</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPage</span><span class="params">()</span>&#123;</span><br><span class="line">    IPage&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//设置每页条数</span></span><br><span class="line">    page.setSize(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//设置查询第几页</span></span><br><span class="line">    page.setCurrent(<span class="number">1</span>);</span><br><span class="line">    userMapper.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">    System.out.println(page.getRecords());<span class="comment">//获取当前页的数据</span></span><br><span class="line">    System.out.println(page.getTotal());<span class="comment">//获取总记录数</span></span><br><span class="line">    System.out.println(page.getCurrent());<span class="comment">//当前页码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-多表分页查询"><a href="#7-2-多表分页查询" class="headerlink" title="7.2 多表分页查询"></a>7.2 多表分页查询</h3><ul><li>如果需要在多表查询时进行分页查询的话，就可以在mapper接口中自定义方法，然后让方法接收Page对象。</li></ul><h4 id="1-示例-2"><a href="#1-示例-2" class="headerlink" title="1. 示例"></a>1. 示例</h4><ul><li>需求：我们需要去查询Orders表，并且要求查询的时候除了要获取到Orders表中的字段，还要获取到每个订单的下单用户的用户名。</li></ul><ol><li>准备工作：<ul><li>SQL准备</li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">o.*,u.`user_name`</span><br><span class="line">FROM </span><br><span class="line">USER u,orders o</span><br><span class="line">WHERE </span><br><span class="line">o.`user_id` = u.`id`</span><br></pre></td></tr></table></figure><ol start="2"><li>实体类修改:<ul><li>增加一个userName属性</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orders</span>  &#123;</span><br><span class="line"><span class="comment">//省略无关代码</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-实现"><a href="#2-实现" class="headerlink" title="2. 实现"></a>2. 实现</h5><ol><li>定义接口，定义方法：</li></ol><ul><li>方法第一个测试定义成Page类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrdersMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Orders&gt; &#123;</span><br><span class="line"></span><br><span class="line">    IPage&lt;Orders&gt; <span class="title function_">findAllOrders</span><span class="params">(Page&lt;Orders&gt; page)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在xml中不需要关心分页操作，MP会帮我们完成。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.sangeng.mapper.OrdersMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllOrders&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sangeng.domian.Orders&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            o.*,u.`user_name`</span><br><span class="line">        FROM</span><br><span class="line">            USER u,orders o</span><br><span class="line">        WHERE</span><br><span class="line">            o.`user_id` = u.`id`</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>然后调用方法测试即可：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> OrdersMapper ordersMapper;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOrdersPage</span><span class="params">()</span>&#123;</span><br><span class="line">    Page&lt;Orders&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//设置每页大小</span></span><br><span class="line">    page.setSize(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//设置当前页码</span></span><br><span class="line">    page.setCurrent(<span class="number">2</span>);</span><br><span class="line">    ordersMapper.findAllOrders(page);</span><br><span class="line">    System.out.println(page.getRecords());</span><br><span class="line">    System.out.println(page.getTotal());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-Service-层接口"><a href="#8-Service-层接口" class="headerlink" title="8.Service 层接口"></a>8.Service 层接口</h2><ul><li>MP也为我们提供了Service层的实现。我们只需要编写一个接口，继承<code>IService</code>，并创建一个接口实现类继承<code>ServiceImpl</code>，即可使用。</li><li>相比于Mapper接口，Service层主要是支持了更多批量操作的方法。</li><li>总结：连impl方法都给你提供好了</li></ul><h3 id="8-1-基本使用"><a href="#8-1-基本使用" class="headerlink" title="8.1 基本使用"></a>8.1 基本使用</h3><h4 id="1-改造前"><a href="#1-改造前" class="headerlink" title="1.  改造前"></a>1.  改造前</h4><ul><li>定义接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>定义实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-改造后"><a href="#2-改造后" class="headerlink" title="2.  改造后"></a>2.  改造后</h4><ul><li>接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper,User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSeervice</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;User&gt; list = userService.list();</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2自定义方法"><a href="#8-2自定义方法" class="headerlink" title="8.2自定义方法"></a>8.2自定义方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    User <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper,User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrdersMapper ordersMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> getBaseMapper();</span><br><span class="line">        List&lt;Orders&gt; orders = ordersMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//查询用户对于的订单</span></span><br><span class="line">        QueryWrapper&lt;Orders&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;user_id&quot;</span>,<span class="number">3</span>);</span><br><span class="line">        List&lt;Orders&gt; ordersList = ordersMapper.selectList(wrapper);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-代码生成器"><a href="#9-代码生成器" class="headerlink" title="9.代码生成器"></a>9.代码生成器</h2><ul><li>MP提供了一个代码生成器，可以让我们一键生成实体类，Mapper接口，Service，Controller等全套代码 。使用方式如下</li></ul><h3 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatisplus代码生成器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--模板引擎--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-生成"><a href="#2-生成" class="headerlink" title="2. 生成"></a>2. 生成</h3><ul><li>修改相应配置后执行以下代码即可</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GeneratorTest</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generate</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">AutoGenerator</span> <span class="variable">generator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局配置</span></span><br><span class="line"><span class="type">GlobalConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">projectPath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line"><span class="comment">// 设置输出到的目录</span></span><br><span class="line">config.setOutputDir(projectPath + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">config.setAuthor(<span class="string">&quot;sangeng&quot;</span>);</span><br><span class="line"><span class="comment">// 生成结束后是否打开文件夹</span></span><br><span class="line">config.setOpen(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局配置添加到 generator 上</span></span><br><span class="line">generator.setGlobalConfig(config);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据源配置</span></span><br><span class="line"><span class="type">DataSourceConfig</span> <span class="variable">dataSourceConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">dataSourceConfig.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/mp_db?characterEncoding=utf-8&amp;serverTimezone=UTC&quot;</span>);</span><br><span class="line">dataSourceConfig.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">dataSourceConfig.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">dataSourceConfig.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据源配置添加到 generator</span></span><br><span class="line">generator.setDataSource(dataSourceConfig);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包配置, 生成的代码放在哪个包下</span></span><br><span class="line"><span class="type">PackageConfig</span> <span class="variable">packageConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">packageConfig.setParent(<span class="string">&quot;com.sangeng.mp.generator&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包配置添加到 generator</span></span><br><span class="line">generator.setPackageInfo(packageConfig);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 策略配置</span></span><br><span class="line"><span class="type">StrategyConfig</span> <span class="variable">strategyConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line"><span class="comment">// 下划线驼峰命名转换</span></span><br><span class="line">strategyConfig.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">strategyConfig.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line"><span class="comment">// 开启lombok</span></span><br><span class="line">strategyConfig.setEntityLombokModel(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 开启RestController</span></span><br><span class="line">strategyConfig.setRestControllerStyle(<span class="literal">true</span>);</span><br><span class="line">generator.setStrategy(strategyConfig);</span><br><span class="line">generator.setTemplateEngine(<span class="keyword">new</span> <span class="title class_">FreemarkerTemplateEngine</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开始生成</span></span><br><span class="line">generator.execute();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="MybatisPlus-高级篇"><a href="#MybatisPlus-高级篇" class="headerlink" title="MybatisPlus-高级篇"></a>MybatisPlus-高级篇</h1><h2 id="1-自动填充："><a href="#1-自动填充：" class="headerlink" title="1.自动填充："></a>1.自动填充：</h2><ul><li><p>在实际项目中的表会和我们的orders表一样，有<strong>更新时间</strong>，<strong>创建时间</strong>，<strong>创建人，更新人</strong>等字段。</p></li><li><p>我们可以使用 <code>@TableField</code> 的 <code>fill</code>  属性来设置字段的自动填充。让我们能更方便的更新相关字段。</p></li></ul><h3 id="1-1-示例"><a href="#1-1-示例" class="headerlink" title="1.1 示例"></a>1.1 示例</h3><ol><li>在对应字段上增加注解：<ul><li>使用TableField注解的fill属性来标注哪些字段需要在自动填充，加了注解MP才会在对应的SQL中为我们预留字段。而属性值代表我们在什么进行什么操作时需要预留字段。</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新时间：在更新和新增时候需要自动填充的功能，所以是INSERT_UPDATE</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createTime;</span><br></pre></td></tr></table></figure><ol start="2"><li>自定义填充处理器  MetaObjectHandler</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now(), metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​</p><h2 id="2-逻辑删除"><a href="#2-逻辑删除" class="headerlink" title="2.逻辑删除"></a>2.逻辑删除</h2><ol><li><p>MP也支持逻辑删除的处理。我们只需要配置好逻辑删除的实体字段名，代表删除的字段值和代表未删除的字段值后即可。</p></li><li><p>注意：如果3.3.0版本之前还需要在对应的字段上加上<code>@TableLogic</code>注解</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">delFlag</span>  <span class="comment"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure><h2 id="3-乐观锁"><a href="#3-乐观锁" class="headerlink" title="3.乐观锁"></a>3.乐观锁</h2><ul><li><p>并发操作时,我们需要保证对数据的操作不发生冲突。乐观锁就是其中一种方式。乐观锁就是先加上不存在并发冲突问题，在进行实际数据操作的时候再检查是否冲突。</p></li><li><p>我们在使用乐观锁时一般在表中增加一个version列。用来记录我们对每天记录操作的版本。每次对某条记录进行过操作是，对应的版本也需要+1。</p></li><li><p>然后我们在每次要进行更新操作时，先查询对应数据的version值。在执行更新时， set version &#x3D; 老版本+1 where version &#x3D; 老版本 </p></li><li><p>如果在查询老版本号到更新操作的中间时刻有其他人更新了这条数据，这样这次更新语句就会更新失败。</p></li><li><p>这里在更新时对version的操作如果有我们自己做就会显的有点麻烦。所以MP提供了乐观锁插件。</p></li><li><p>使用后我们就可以非常方便的实现对version的操作。</p></li></ul><h3 id="3-1-使用"><a href="#3-1-使用" class="headerlink" title="3.1 使用"></a>3.1 使用</h3><ul><li>配置对应插件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 旧版</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OptimisticLockerInterceptor <span class="title function_">optimisticLockerInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OptimisticLockerInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新版</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在实体类的字段上加上<code>@Version</code>注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure><ul><li><p>更新</p></li><li><p><strong>注意：在更新前我们一定要先查询到version设置到实体类上再进行更新才能生效</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testVersion</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//查询id为3的数据</span></span><br><span class="line">    QueryWrapper&lt;Orders&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;id&quot;</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> ordersMapper.selectOne(queryWrapper);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//对id为3的数据进行更新  把price修改为88</span></span><br><span class="line">    orders.setPrice(<span class="number">88</span>);</span><br><span class="line">    ordersMapper.updateById(orders);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这种情况下我们可以看到执行的sql已经发生了变化。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">==&gt;  Preparing: UPDATE orders SET price=?, update_time=?, version=? WHERE id=? AND version=? AND del_flag=0</span><br><span class="line">==&gt; Parameters: 8888(Integer), null, 2(Integer), 2(Long), 1(Integer)</span><br></pre></td></tr></table></figure><h3 id="3-2-多插件配置问题"><a href="#3-2-多插件配置问题" class="headerlink" title="3.2 多插件配置问题"></a>3.2 多插件配置问题</h3><ul><li><p>我们在使用3.4.0版本以后的MP时，如果需要用到多个插件的话要注意。在配置的时候只需要注入一个MybatisPlusInterceptor 对象，把插件对象添加到MybatisPlusInterceptor 对象中即可。</p></li><li><p>例如：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">    interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">    interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">    <span class="keyword">return</span> interceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意顺序：<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20230105222309154.png" alt="image-20230105222309154"></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> MyBatis-Plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot笔记-2</title>
      <link href="/2023/01/01/Springboot%E7%AC%94%E8%AE%B0-2/"/>
      <url>/2023/01/01/Springboot%E7%AC%94%E8%AE%B0-2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Springboot2-5学习笔记-2"><a href="#Springboot2-5学习笔记-2" class="headerlink" title="Springboot2.5学习笔记-2"></a>Springboot2.5学习笔记-2</h1><blockquote><p>三更草堂</p><p>参考三更老师笔记，仅供学习使用，侵删。</p><p>源码（我自己的）：<a href="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/springboot_study.zip">https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/springboot_study.zip</a></p></blockquote><hr><h2 id="15-Web开发"><a href="#15-Web开发" class="headerlink" title="15.Web开发"></a>15.Web开发</h2><h3 id="1-静态资源访问"><a href="#1-静态资源访问" class="headerlink" title="1.静态资源访问"></a>1.<strong>静态资源访问</strong></h3><p>​1. 由于SpringBoot的项目是打成jar包的所以没有之前web项目的那些web资源目录(webapps)。那么我们的静态资源要放到哪里呢？—-&gt;SpringBoot官方文档中说把静态资源放到 <code>resources/static</code>   (或者 <code>resources/public</code> 或者<code>resources/resources</code> 或者 <code>resources/META-INF/resources</code>) 中即可。</p><ul><li>静态资源放完后，</li><li>例如我们想访问文件：resources&#x2F;static&#x2F;index.html  只需要在访问时资源路径写成&#x2F;index.html即可。  </li><li>例如我们想访问文件：resources&#x2F;static&#x2F;pages&#x2F;login.html  访问的资源路径写成： &#x2F;pages&#x2F;login.html</li></ul><h3 id="2-修改静态资源访问路径"><a href="#2-修改静态资源访问路径" class="headerlink" title="2.修改静态资源访问路径"></a>2.修改静态资源访问路径</h3><ol><li>SpringBoot默认的静态资源路径匹配为&#x2F;** 。如果想要修改可以通过 <code>spring.mvc.static-path-pattern</code> 这个配置进行修改。</li><li>例如想让访问静态资源的url必须前缀有&#x2F;res。例如&#x2F;res&#x2F;index.html 才能访问到static目录中的。我们可以修改如下：</li></ol><ul><li>在application.yml中</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span> <span class="comment">#修改静态资源访问路径</span></span><br></pre></td></tr></table></figure><ul><li>注：查看源码配置时要注意数据类型才知道如何配置。</li></ul><h3 id="3-修改静态资源存放目录"><a href="#3-修改静态资源存放目录" class="headerlink" title="3.修改静态资源存放目录"></a>3.<strong>修改静态资源存放目录</strong></h3><ol><li>我们可以修改 spring.web.resources.static-locations 这个配置来修改静态资源的存放目录。</li><li>例如:</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">static-locations:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">classpath:/sgstatic/</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="string">classpath:/static/</span></span><br></pre></td></tr></table></figure><h3 id="4-设置请求映射规则-RequestMapping"><a href="#4-设置请求映射规则-RequestMapping" class="headerlink" title="4.设置请求映射规则@RequestMapping"></a>4.设置请求映射规则@RequestMapping</h3><blockquote><p>注：springmvc知识</p></blockquote><ol><li><p>详细讲解：<a href="https://www.bilibili.com/video/BV1AK4y1o74Y">https://www.bilibili.com/video/BV1AK4y1o74Y</a>  P5-P12</p></li><li><p>该注解可以加到方法上或者是类上（查看其源码可知）。我们可以用其来设定所能匹配请求的要求。只有符合了设置的要求，请求才能被加了该注解的方法或类处理。</p></li></ol><h4 id="4-1（4-1-4-4指定请求）指定请求路径："><a href="#4-1（4-1-4-4指定请求）指定请求路径：" class="headerlink" title="4.1（4.1-4.4指定请求）指定请求路径："></a>4.1（4.1-4.4指定请求）指定请求路径：</h4><ol><li><p>path或者value属性都可以用来指定请求路径。</p></li><li><p>例如：</p><ul><li>我们期望让请求的资源路径为**&#x2F;test&#x2F;testPath<strong>的请求能够被</strong>testPath**方法处理则可以写如下代码</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testPath&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testPath</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;testPath&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类上也可以加，这个和下面这个功能一样：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test/testPath&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testPath</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;testPath&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2指定请求方式："><a href="#4-2指定请求方式：" class="headerlink" title="4.2指定请求方式："></a>4.2指定请求方式：</h4><ol><li><p>@RequestMapping注解中的method属性可以指定请求方式：我们期望让请求的资源路径为**&#x2F;test&#x2F;testMethod<strong>的</strong>POST<strong>请求能够被</strong>testMethod**方法处理。则可以写如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/testMethod&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;testMethod处理了请求&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;testMethod&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以ctrl+左键点进method发现对象数组，再点发现枚举类以及可以编写的请求方式，一般这种都是枚举类。method &#x3D; Request.直接写名称就行。</li></ul></li><li><p>也可以用注解来进行替换：</p><ul><li>​    @PostMapping    等价于   @RequestMapping(method &#x3D; RequestMethod.POST) </li><li>​@GetMapping    等价于   @RequestMapping(method &#x3D; RequestMethod.GET) </li><li>​@PutMapping    等价于   @RequestMapping(method &#x3D; RequestMethod.PUT) </li><li>​@DeleteMapping    等价于   @RequestMapping(method &#x3D; RequestMethod.DELETE)</li></ul></li><li><p>例如：</p><p>​上面的需求我们可以使用下面的写法实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/testMethod&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;testMethod处理了请求&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;testMethod&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>指定请求参数</p><ol><li><p>我们可以使用<strong>params</strong>属性来对请求参数进行一些限制。可以要求必须具有某些参数，或者是某些参数必须是某个值，或者是某些参数必须不是某个值。</p></li><li><p>例如：</p><ul><li>我们期望让请求的资源路径为**&#x2F;test&#x2F;testParams<strong>的</strong>GET<strong>请求,并且请求参数中</strong>具有code参数**的请求能够被testParams方法处理。则可以写如下代码</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/testParams&quot;,method = RequestMethod.GET,params = &quot;code&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testParams</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;testParams处理了请求&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;testParams&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果是要求<strong>不能有code</strong>这个参数可以把改成如下形式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/testParams&quot;,method = RequestMethod.GET,params = &quot;!code&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testParams</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;testParams处理了请求&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;testParams&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果要求有code这参数，并且这参数值必须<strong>是某个值</strong>可以改成如下形式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/testParams&quot;,method = RequestMethod.GET,params = &quot;code=sgct&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testParams</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;testParams处理了请求&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;testParams&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果要求有code这参数，并且这参数值必须<strong>不是某个值</strong>可以改成如下形式</li></ul><p></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/testParams&quot;,method = RequestMethod.GET,params = &quot;code!=sgct&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testParams</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;testParams处理了请求&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;testParams&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="4-3指定请求头："><a href="#4-3指定请求头：" class="headerlink" title="4.3指定请求头："></a>4.3指定请求头：</h4><ul><li>使用<strong>headers</strong>属性来对请求头进行一些限制。</li></ul><ol><li><p>例如：</p><ul><li>我们期望让请求的资源路径为**&#x2F;test&#x2F;testHeaders的<strong>GET</strong>请求,并且请求头中<strong>具有</strong>deviceType**的请求能够被testHeaders方法处理。则可以写如下代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/testHeaders&quot;,method = RequestMethod.GET,headers = &quot;deviceType&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testHeaders</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;testHeaders处理了请求&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;testHeaders&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果是要求不能有<strong>deviceType</strong>这个请求头可以把改成如下形式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/testHeaders&quot;,method = RequestMethod.GET,headers = &quot;!deviceType&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testHeaders</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;testHeaders处理了请求&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;testHeaders&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果要求有deviceType这个请求头，并且其值必须<strong>是某个值</strong>可以改成如下形式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/testHeaders&quot;,method = RequestMethod.GET,headers = &quot;deviceType=ios&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testHeaders</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;testHeaders处理了请求&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;testHeaders&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果要求有deviceType这个请求头，并且其值必须<strong>不是某个值</strong>可以改成如下形式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/testHeaders&quot;,method = RequestMethod.GET,headers = &quot;deviceType!=ios&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testHeaders</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;testHeaders处理了请求&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;testHeaders&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="4-4指定请求头Content-Type："><a href="#4-4指定请求头Content-Type：" class="headerlink" title="4.4指定请求头Content-Type："></a>4.4指定请求头Content-Type：</h4><ol><li><p>使用<strong>consumes</strong>属性来对<strong>Content-Type</strong>这个请求头进行一些限制。</p><h5 id="1-1-范例一"><a href="#1-1-范例一" class="headerlink" title="1.1 范例一"></a>1.1 范例一</h5><ul><li>我们期望让请求的资源路径为**&#x2F;test&#x2F;testConsumes**的POST请求,并且请求头中的Content-Type头必须为 <strong>multipart&#x2F;from-data</strong> 的请求能够被testConsumes方法处理。则可以写如下代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/testConsumes&quot;,method = RequestMethod.POST,consumes = &quot;multipart/from-data&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testConsumes</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;testConsumes处理了请求&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;testConsumes&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-范例二"><a href="#1-2-范例二" class="headerlink" title="1.2 范例二"></a>1.2 范例二</h5><ul><li>如果我们要求请求头Content-Type的值必须<strong>不能为某个multipart&#x2F;from-data</strong>则可以改成如下形式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/testConsumes&quot;,method = RequestMethod.POST,consumes = &quot;!multipart/from-data&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testConsumes</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;testConsumes处理了请求&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;testConsumes&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="4-5（4-5-4-8获取参数）获取请求参数："><a href="#4-5（4-5-4-8获取参数）获取请求参数：" class="headerlink" title="4.5（4.5-4.8获取参数）获取请求参数："></a>4.5（4.5-4.8获取参数）获取请求参数：</h4><ul><li><p>RestFul风格：原来的请求参数加入到请求资源地址中。然后原来请求的增，删，改，查操作。改为使用HTTP协议中请求方式GET、POST、PUT、DELETE表示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">比如：http://ip:port/工程名/资源名?请求参数举例：http://127.0.0.1:8080/springmvc/book?action=delete&amp;id=1</span><br><span class="line"></span><br><span class="line">restful风格是：</span><br><span class="line"></span><br><span class="line">比如：http://ip:port/工程名/资源名/请求参数/请求参数举例：http://127.0.0.1:8080/springmvc/book/1</span><br><span class="line"></span><br><span class="line">请求的动作删除由请求方式delete决定</span><br></pre></td></tr></table></figure></li><li><p>restful风格中请求方式GET、POST、PUT、DELETE分别表示查、增、改、删。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET请求                             对应             查询</span><br><span class="line">http://ip:port/工程名/book/1HTTP请求GET表示要查询id为1的图书</span><br><span class="line">http://ip:port/工程名/book    HTTP请求GET表示查询全部的图书</span><br><span class="line"></span><br><span class="line">POST请求对应添加</span><br><span class="line">http://ip:port/工程名/book    HTTP请求POST表示要添加一个图书</span><br><span class="line"></span><br><span class="line">PUT请求对应修改</span><br><span class="line">http://ip:port/工程名/book/1HTTP请求PUT表示要修改id为1的图书信息</span><br><span class="line"></span><br><span class="line">DELETE请求对应删除</span><br><span class="line">http://ip:port/工程名/book/1HTTP请求DELETE表示要删除id为1的图书信息</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>获取路径参数：RestFul风格（）的接口一些参数是在请求路径上的。类似： &#x2F;user&#x2F;1  这里的1就是id。</p><p>如果我们想获取这种格式的数据可以使用**@PathVariable**来实现。</p><h5 id="1-1-范例一-1"><a href="#1-1-范例一-1" class="headerlink" title="1.1 范例一"></a>1.1 范例一</h5><ul><li>要求定义个RestFul风格的接口，该接口可以用来根据id查询用户。请求路径要求为  &#x2F;user  ，请求方式要求为GET。</li><li>而请求参数id要写在请求路径上，例如  &#x2F;user&#x2F;1   这里的1就是id。</li><li>我们可以定义如下方法，通过如下方式来获取路径参数：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findUserById</span><span class="params">( <span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;findUserById&quot;</span>);</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;findUserById&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-范例二-1"><a href="#1-2-范例二-1" class="headerlink" title="1.2 范例二"></a>1.2 范例二</h5><ul><li>如果这个接口，想根据id和username查询用户。请求路径要求为  &#x2F;user  ，请求方式要求为GET。</li><li>而请求参数id和name要写在请求路径上，例如  &#x2F;user&#x2F;1&#x2F;zs   这里的1就是id，zs是name</li><li>我们可以定义如下方法，通过如下方式来获取路径参数：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user/&#123;id&#125;/&#123;name&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,<span class="meta">@PathVariable(&quot;name&quot;)</span> String name)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;findUser&quot;</span>);</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;findUser&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="4-6获取请求体中的Json格式参数"><a href="#4-6获取请求体中的Json格式参数" class="headerlink" title="4.6获取请求体中的Json格式参数"></a>4.6获取请求体中的Json格式参数</h4><ul><li>RestFul风格的接口一些比较复杂的参数会转换成Json通过请求体传递过来。这种时候我们可以使用**@RequestBody**注解获取请求体中的数据。</li></ul><ol><li><p>配置：SpringBoot的web启动器已经默认导入了jackson的依赖，不需要再额外导入依赖了。也不需要配置mvc中的注解驱动了。</p></li><li><p>使用：</p><h6 id="2-1-范例一"><a href="#2-1-范例一" class="headerlink" title="2.1 范例一"></a>2.1 范例一</h6><ul><li><p>要求定义个RestFul风格的接口，该接口可以用来新建用户。请求路径要求为  &#x2F;user  ，请求方式要求为POST。</p></li><li><p>用户数据会转换成json通过请求体传递。</p></li><li><p>请求体数据：</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;三更&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">15</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>也就是说接收json数据并且转换为对应的对象</strong></li></ul><h6 id="2-1-1-获取参数封装成实体对象"><a href="#2-1-1-获取参数封装成实体对象" class="headerlink" title="2.1.1 获取参数封装成实体对象"></a>2.1.1 获取参数封装成实体对象</h6><ul><li>如果我们想把Json数据获取出来封装User对象,我们可以这样定义方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">insertUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;insertUser&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;insertUser&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-1-2-获取参数封装成Map集合"><a href="#2-1-2-获取参数封装成Map集合" class="headerlink" title="2.1.2 获取参数封装成Map集合"></a>2.1.2 获取参数封装成Map集合</h6><ul><li>也可以把该数据获取出来封装成Map集合：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">insertUser</span><span class="params">(<span class="meta">@RequestBody</span> Map map)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;insertUser&quot;</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;insertUser&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="2-2-范例二"><a href="#2-2-范例二" class="headerlink" title="2.2 范例二"></a>2.2 范例二</h6><ol><li>如果请求体传递过来的数据是一个User集合转换成的json，Json数据可以这样定义：</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;三更1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">14</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;三更2&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">15</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;三更3&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><ul><li>方法定义：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = <span class="string">&quot;/users&quot;</span><span class="punctuation">,</span>method = RequestMethod.POST)</span><br><span class="line">    public String insertUsers(@RequestBody List&lt;User&gt; users)<span class="punctuation">&#123;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;insertUsers&quot;</span>);</span><br><span class="line">        System.out.println(users);</span><br><span class="line">        return <span class="string">&quot;insertUser&quot;</span>;</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>注意事项：</strong>如果需要使用**@RequestBody**来获取请求体中Json并且进行转换，要求请求头 （key）Content-Type 的值（value）要为： application&#x2F;json 。</li></ul></li></ol><h4 id="4-7获取QueryString格式参数"><a href="#4-7获取QueryString格式参数" class="headerlink" title="4.7获取QueryString格式参数"></a>4.7获取QueryString格式参数</h4><ul><li>如果接口的参数是使用QueryString的格式的话，我们也可以使用SpringMVC快速获取参数。</li><li>我们可以使用**@RequestParam**来获取QueryString格式的参数。</li></ul><ol><li><p>什么是QueryString格式：在请求中间加一个？进行分隔，写<code>参数名=参数值</code>，多个参数之间用&amp;进行分隔。如：localhost：8080&#x2F;user？name&#x3D;zhangsan&amp;age&#x3D;18</p></li><li><p>参数单独的获取</p><ul><li>如果我们想把id，name，likes单独获取出来可以使用如下写法：</li><li>在方法中定义方法参数，方法参数名要和请求参数名一致，这种情况下我们可以省略**@RequestParam**注解。（SpringMVC自带的功能，详情见JavaWeb复习笔记）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRquestParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testRquestParam</span><span class="params">(Integer id, String name, String[] likes)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;testRquestParam&quot;</span>);</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(Arrays.toString(likes));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;testRquestParam&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注意数组类型的要这么写</span><br><span class="line">localhost:8080/paramstest?name=zhangsan&amp;age=18&amp;likes=唱&amp;likes=跳&amp;likes=rap&amp;likes=篮球</span><br></pre></td></tr></table></figure><ul><li>如果方法参数名和请求参数名不一致，我们可以加上**@RequestParam**注解例如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRquestParam&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">testRquestParam</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> Integer uid,<span class="meta">@RequestParam(&quot;name&quot;)</span> String name, <span class="meta">@RequestParam(&quot;likes&quot;)</span>String[] likes)</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testRquestParam&quot;</span>);</span><br><span class="line">       System.out.println(uid);</span><br><span class="line">       System.out.println(name);</span><br><span class="line">       System.out.println(Arrays.toString(likes));</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;testRquestParam&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>获取参数封装成实体对象</p><ul><li>如果我们想把这些参数封装到一个User对象中可以使用如下写法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRquestParam&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">testRquestParam</span><span class="params">(User user)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;testRquestParam&quot;</span>);</span><br><span class="line">      System.out.println(user);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;testRquestParam&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>User类定义如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String[] likes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试时请求url如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/testRquestParam?id=1&amp;name=三更草堂&amp;likes=编程&amp;likes=录课&amp;likes=烫头</span><br></pre></td></tr></table></figure><ul><li><p><strong>注意：实体类中的成员变量要和请求参数名对应上。并且要提供对应的set&#x2F;get方法。</strong></p></li><li><p>此时也是SpringMVC的特性自动读取</p></li></ul></li></ol><h4 id="4-8相关注解其他属性"><a href="#4-8相关注解其他属性" class="headerlink" title="4.8相关注解其他属性"></a>4.8相关注解其他属性</h4><ol><li><p>required:</p><ul><li><p>代表是否必须，默认值为true也就是必须要有对应的参数。如果没有就会报错。</p></li><li><p>如果对应的参数可传可不传则可以把其设置为fasle</p></li><li><p>例如：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRquestParam&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">testRquestParam</span><span class="params">(<span class="meta">@RequestParam(value = &quot;id&quot;,required = false)</span> Integer uid,<span class="meta">@RequestParam(&quot;name&quot;)</span> String name, <span class="meta">@RequestParam(&quot;likes&quot;)</span>String[] likes)</span>&#123;<span class="comment">//也就是说这个id属性可传可不传</span></span><br><span class="line">       System.out.println(<span class="string">&quot;testRquestParam&quot;</span>);</span><br><span class="line">       System.out.println(uid);</span><br><span class="line">       System.out.println(name);</span><br><span class="line">       System.out.println(Arrays.toString(likes));</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;testRquestParam&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>defaultValue：</p><ul><li><p>如果对应的参数没有，我们可以用defaultValue属性设置默认值。</p></li><li><p>例如：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRquestParam&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">testRquestParam</span><span class="params">(<span class="meta">@RequestParam(value = &quot;id&quot;,required = false,defaultValue = &quot;777&quot;)</span> Integer uid,<span class="meta">@RequestParam(&quot;name&quot;)</span> String name, <span class="meta">@RequestParam(&quot;likes&quot;)</span>String[] likes)</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testRquestParam&quot;</span>);</span><br><span class="line">       System.out.println(uid);</span><br><span class="line">       System.out.println(name);</span><br><span class="line">       System.out.println(Arrays.toString(likes));</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;testRquestParam&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-响应体响应数据"><a href="#5-响应体响应数据" class="headerlink" title="5.响应体响应数据"></a>5.响应体响应数据</h3><ol><li>无论是RestFul风格还是我们之前web阶段接触过的异步请求，都需要把数据转换成Json放入响应体中。springboot还是借助的springmvc框架。</li></ol><h4 id="5-1数据放到响应体"><a href="#5-1数据放到响应体" class="headerlink" title="5.1数据放到响应体"></a>5.1数据放到响应体</h4><ol><li><strong>@ResponseBody</strong>可以把json放到响应体中。</li><li><strong>@ResponseBody</strong>既可以放到类上又可以放到方法上。</li><li>之前我加在了controller上面，@RestController注解包含@Controller和@ResponseBody。<strong>也就是说：</strong>现在controller中返回的数据全部会加到响应体里面。</li></ol><h4 id="5-2数据转换成json"><a href="#5-2数据转换成json" class="headerlink" title="5.2数据转换成json"></a>5.2数据转换成json</h4><ol><li><p>配置：SpringBoot项目中使用了web的start后，不需要进行额外的依赖和配置。也不需要开启注解驱动。</p></li><li><p>使用：返回相应的响应数据就行，springmvc会帮我们转换成json数据，放到响应体中。</p><ul><li>只要把要转换的数据直接作为方法的返回值返回即可。SpringMVC会帮我们把返回值转换成json。具体代码请参考范例。</li></ul></li><li><p>范例</p><h6 id="3-1-范例一"><a href="#3-1-范例一" class="headerlink" title="3.1 范例一"></a>3.1 范例一</h6><ol><li><p>要求定义个RestFul风格的接口，该接口可以用来根据id查询用户。请求路径要求为  &#x2F;response&#x2F;user  ，请求方式要求为GET。</p><ul><li><p>而请求参数id要写在请求路径上，例如   &#x2F;response&#x2F;user&#x2F;1   这里的1就是id。</p></li><li><p>要求获取参数id,去查询对应id的用户信息（模拟查询即可，可以选择直接new一个User对象），并且转换成json响应到响应体中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/response&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span><span class="comment">//因为返回的数据是要加到响应体当中的，所以加上这个注解。</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(id, <span class="string">&quot;三更草堂&quot;</span>, <span class="number">15</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li>注：这里是RestFul风格，也就是查询时<code>/查询条件</code>，而不是？隔开查询条件之间写&amp;，所以需要@PathVariable注解告诉mvc你这个请求参数是给谁的。</li></ul></li></ol><h3 id="6-前后端分离案例"><a href="#6-前后端分离案例" class="headerlink" title="6.前后端分离案例"></a>6.前后端分离案例</h3><ol><li>准备</li><li>搭建三层架构</li><li>整合mybatis：引入依赖，配置yml，根据mapper接口生成对应xml文件，写sql语句。</li></ol><h3 id="7-接口响应格式统一"><a href="#7-接口响应格式统一" class="headerlink" title="7.接口响应格式统一"></a>7.接口响应格式统一</h3><ol><li><p>我们要保证一个项目中所有接口返回的数据格式的统一。这样无论是前端还是移动端开发获取到我们的数据后都能更方便的进行统一处理。</p><ul><li><p>所以我们定义以下结果封装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseResult</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提示信息，如果有错误时，前端可以获取该字段进行提示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询到的结果数据，</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(Integer code, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(Integer code, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMsg</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(Integer code, String msg, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>之前的接口修改为 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/findall&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> ResponseResult <span class="title function_">findAll</span><span class="params">()</span>&#123;</span><br><span class="line">       List&lt;User1&gt; users = service.findAll();</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(<span class="number">200</span>,users);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>前端版-前端发送请求代码编写</p><ul><li><p>先引入vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>再引入axios</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>两者在这里都是cdn方式引入</p></li><li><p>编写前端js代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v=<span class="keyword">new</span> <span class="title function_">vue</span>(&#123;</span><br><span class="line">         <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">         <span class="title function_">created</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">findAll</span>();</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">methods</span>:&#123;</span><br><span class="line">            <span class="title function_">findAll</span>(<span class="params"></span>)&#123;</span><br><span class="line">               <span class="comment">//请求后台接口把接受到的数据渲染展示在页面中</span></span><br><span class="line">               axios.<span class="title function_">get</span>(<span class="string">&quot;http://localhost/user/findall&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">                  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">               &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>纯后端：把老师的网页拿过来覆盖一下…</p></li></ol><h3 id="8-跨域请求以及SpringBoot使用CORS解决跨域"><a href="#8-跨域请求以及SpringBoot使用CORS解决跨域" class="headerlink" title="8.跨域请求以及SpringBoot使用CORS解决跨域"></a>8.跨域请求以及SpringBoot使用CORS解决跨域</h3><ol><li><p><strong>什么是跨域：浏览器</strong>出于安全的考虑，使用 XMLHttpRequest对象发起 HTTP请求时必须遵守同源策略，否则就是跨域的HTTP请求，默认情况下是被禁止的。 同源策略要求源相同才能正常进行通信，即协议、域名、端口号都完全一致。 </p><ul><li>什么叫同源？协议、域名、端口号都完全一致。 <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221230231423896.png" alt="image-20221230231423896">这个findall请求（前端) 端口不对。</li></ul></li><li><p><strong>CORS解决跨域：</strong></p><ul><li>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing），允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</li><li>它通过服务器增加一个<strong>特殊的Header</strong>[Access-Control-Allow-Origin]来告诉客户端跨域的限制，如果浏览器支持CORS、并且判断Origin通过的话，就会允许XMLHttpRequest发起跨域请求。</li></ul></li><li><p><strong>SpringBoot使用CORS解决跨域：</strong></p><ul><li><p>可以在支持跨域的方法上或者是Controller上加上@CrossOrigin注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserServcie userServcie;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">findAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//调用service查询数据 ，进行返回</span></span><br><span class="line">        List&lt;User&gt; users = userServcie.findAll();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(<span class="number">200</span>,users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 WebMvcConfigurer 的 addCorsMappings 方法配置CorsInterceptor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">      <span class="comment">// 设置允许跨域的路径</span></span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                <span class="comment">// 设置允许跨域请求的域名</span></span><br><span class="line">                .allowedOriginPatterns(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">// 是否允许cookie</span></span><br><span class="line">                .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">                <span class="comment">// 设置允许的请求方式</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;PUT&quot;</span>)</span><br><span class="line">                <span class="comment">// 设置允许的header属性</span></span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">// 跨域允许时间</span></span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>前端版-数据渲染：</strong></p><ol><li><p>前端数据渲染分析：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221231124421952.png" alt="image-20221231124421952"></p><ul><li>前端收到的是后端返回来的数据：一个对象（ResultResponse），有我们自己设置的状态码code和data数组数据</li></ul></li><li><p>渲染代码实现：</p><ul><li><p>前端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">v</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">         el:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">         data:&#123;</span><br><span class="line">             users:[]</span><br><span class="line">         &#125;,</span><br><span class="line">         created()&#123;</span><br><span class="line">             <span class="built_in">this</span>.findAll();</span><br><span class="line">         &#125;,</span><br><span class="line">         methods:&#123;</span><br><span class="line">             findAll()&#123;</span><br><span class="line">                 <span class="comment">//请求后台接口  把接受到的数据渲染展示在页面中</span></span><br><span class="line">                 axios.get(<span class="string">&quot;http://localhost/user/findAll&quot;</span>).then((res)=&gt;&#123;</span><br><span class="line">                     console.log(res);</span><br><span class="line">                     <span class="comment">//判断是否成功</span></span><br><span class="line">                     <span class="keyword">if</span>(res.data.code==<span class="number">200</span>)&#123;</span><br><span class="line">                         <span class="comment">//如果成功，把数据赋值给this.users</span></span><br><span class="line">                         <span class="built_in">this</span>.users = res.data.data;</span><br><span class="line">                     &#125;</span><br><span class="line">        </span><br><span class="line">                 &#125;)</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure></li><li><p>为什么统一响应格式？–&gt;在这里方便前端检查错误和接收数据。</p></li></ul></li></ol></li></ol><h3 id="9-Token-JWT以及登陆案例"><a href="#9-Token-JWT以及登陆案例" class="headerlink" title="9.Token-JWT以及登陆案例"></a>9.Token-JWT以及登陆案例</h3><ol><li><p><strong>登录校验流程</strong></p><ul><li>思路分析：在前后端分离的场景中，很多时候会采用token的方案进行登录校验。登录成功时，后端会根据一些用户信息生成一个token字符串返回给前端。前端会存储这个token。以后前端发起请求时如果有token就会把token放在请求头中发送给后端。后端接口就可以获取请求头中的token信息进行解析，如果解析不成功说明token超时了或者不是正确的token，相当于是未登录状态。如果解析成功，说明前端是已经登录过的。</li><li>因为移动端没有cookie-session，所以token更好，前后端分离登录校验图：<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221231132638826.png" alt="image-20221231132638826"></li></ul></li><li><p><strong>token主流生成方案-JWT</strong></p><ol><li><strong>本案例采用目前企业中运用比较多的JWT来生成token。cookie-session也能实现</strong></li></ol><ul><li><p>使用时先引入相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>然后可以使用下面的<strong>工具类</strong>来生成和解析token</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.JwtBuilder;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JWT工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有效期为</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">JWT_TTL</span> <span class="operator">=</span> <span class="number">60</span> * <span class="number">60</span> *<span class="number">1000L</span>;<span class="comment">// 60 * 60 *1000  一个小时</span></span><br><span class="line">    <span class="comment">//设置秘钥明文</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JWT_KEY</span> <span class="operator">=</span> <span class="string">&quot;sangeng&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ttlMillis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String id, String subject, Long ttlMillis)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line">        <span class="type">long</span> <span class="variable">nowMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(nowMillis);</span><br><span class="line">        <span class="keyword">if</span>(ttlMillis==<span class="literal">null</span>)&#123;</span><br><span class="line">            ttlMillis=JwtUtil.JWT_TTL;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> nowMillis + ttlMillis;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">expDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line"></span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                .setId(id)              <span class="comment">//唯一的ID</span></span><br><span class="line">                .setSubject(subject)   <span class="comment">// 主题  可以是JSON数据</span></span><br><span class="line">                .setIssuer(<span class="string">&quot;sg&quot;</span>)     <span class="comment">// 签发者</span></span><br><span class="line">                .setIssuedAt(now)      <span class="comment">// 签发时间</span></span><br><span class="line">                .signWith(signatureAlgorithm, secretKey) <span class="comment">//使用HS256对称加密算法签名, 第二个参数为秘钥</span></span><br><span class="line">                .setExpiration(expDate);<span class="comment">// 设置过期时间</span></span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成加密后的秘钥 secretKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SecretKey <span class="title function_">generalKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] encodedKey = Base64.getDecoder().decode(JwtUtil.JWT_KEY);</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(encodedKey, <span class="number">0</span>, encodedKey.length, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJWT</span><span class="params">(String jwt)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(secretKey)</span><br><span class="line">                .parseClaimsJws(jwt)</span><br><span class="line">                .getBody();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主方法测试一下生成token</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtil.createJWT(UUID.randomUUID().toString(), <span class="string">&quot;sangeng&quot;</span>, <span class="literal">null</span>);<span class="comment">//可以设置超时时间</span></span><br><span class="line">        System.out.println(token);<span class="comment">//生成token</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtil.parseJWT(token);<span class="comment">//解析token，如果超时会报错，解析失败也会报错</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">subject</span> <span class="operator">=</span> claims.getSubject();</span><br><span class="line">        System.out.println(subject);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>下一个登录接口逻辑使用jwt方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtil.createJWT(UUID.randomUUID().toString(), String.valueOf(loginUser.getId()), <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><ul><li><p>uuid生成随机id，获取查询而来的对象id转化为id值，超时时间设置为空—-&gt;他们全部转化为一个字符串类型的token对象</p></li><li><p>&#96;&#96;&#96;java<br>Map&lt;String,Object&gt; loginUserTokenMap&#x3D; new HashMap&lt;&gt;();<br>loginUserTokenMap.put(“token”,token);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 下一步将生成的token对象加入创建的map中，最后返回这个map</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  return new ResponseResult(200,&quot;登录成功&quot;,loginUserTokenMap);</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol start="2"><li><p><strong>登录接口实现</strong></p><ul><li><p>数据准备</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sys_user`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_user` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Data for the table `sys_user` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `sys_user`(`id`,`username`,`password`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;sangeng&#x27;</span>,<span class="string">&#x27;caotang&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemUser</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>SystemUserController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sangeng.domain.ResponseResult;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.SystemUser;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.service.SystemUserService;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.utils.JwtUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/sys_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemUserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SystemUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> SystemUser user)</span> &#123;</span><br><span class="line">        <span class="comment">//校验用户名密码是否正确</span></span><br><span class="line">        <span class="type">SystemUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> userService.login(user);</span><br><span class="line">        Map&lt;String, Object&gt; map;</span><br><span class="line">        <span class="keyword">if</span> (loginUser != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果正确 生成token返回</span></span><br><span class="line">            map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtil.createJWT(UUID.randomUUID().toString(), String.valueOf(loginUser.getId()), <span class="literal">null</span>);</span><br><span class="line">            map.put(<span class="string">&quot;token&quot;</span>, token);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果不正确 给出相应的提示</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(<span class="number">300</span>, <span class="string">&quot;用户名或密码错误，请重新登录&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(<span class="number">200</span>, <span class="string">&quot;登录成功&quot;</span>, map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SystemUserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SystemUser <span class="title function_">login</span><span class="params">(SystemUser user)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemUserServcieImpl</span> <span class="keyword">implements</span> <span class="title class_">SystemUserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SystemUserMapper systemUserMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SystemUser <span class="title function_">login</span><span class="params">(SystemUser user)</span> &#123;</span><br><span class="line">        <span class="type">SystemUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> systemUserMapper.login(user);</span><br><span class="line">        <span class="keyword">return</span> loginUser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>dao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>&#96;&#96;&#96;xml</p><?xml version="1.0" encoding="UTF-8" ?><!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" ><mapper namespace="com.sangeng.mapper.SystemUserMapper">    <select id="login" resultType="com.sangeng.domain.SystemUser">        select * from sys_user where username = #{username} and password = #{password}    </select></mapper><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   3. 登录页面</span><br><span class="line"></span><br><span class="line">      - 前端准备：在资料中</span><br><span class="line">      - 通过异步请求获取</span><br><span class="line"></span><br><span class="line">### 10.拦截器</span><br><span class="line"></span><br><span class="line">1. 在上个案例来说，如果我们后端多个接口想要对token进行解析判断用户的登录态，如果很多接口都要进行登录校验的话会很麻烦，所以这里使用拦截器更方便。</span><br><span class="line">2. 什么是拦截器？如果我们想在多个Handler方法执行之前或者之后都进行一些处理，甚至某些情况下需要拦截掉，不让Handler方法执行。那么可以使用SpringMVC为我们提供的拦截器。详情见 https://space.bilibili.com/663528522 SpringMVC课程中拦截器相关章节。</span><br><span class="line">3. 拦截器和过滤器要区分开：过滤器是在Servlet执行之前或者之后进行处理。而拦截器是对Handler(处理器)执行前后进行处理。</span><br><span class="line">   如图：![image-20221231183223153](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221231183223153.png)</span><br><span class="line"></span><br><span class="line">4. 使用步骤：</span><br><span class="line"></span><br><span class="line">   - 创建类实现HandlerInterceptor接口</span><br><span class="line"></span><br><span class="line">     ```java</span><br><span class="line">     public class LoginInterceptor implements HandlerInterceptor &#123;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><p>实现方法：注意注解的使用，因为springboot不用像ssm那样配置，但是配置换成注解自动注入，注意别忘了注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取请求头中的token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="comment">//判断token是否为空，如果为空也代表未登录 提醒重新登录（401）</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasText(token))&#123;</span><br><span class="line">            response.sendError(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//解析token看看是否成功</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtil.parseJWT(token);</span><br><span class="line">            <span class="type">String</span> <span class="variable">subject</span> <span class="operator">=</span> claims.getSubject();</span><br><span class="line">            System.out.println(subject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//如果解析过程中没有出现异常说明是登录状态</span></span><br><span class="line">            <span class="comment">//如果出现了异常，说明未登录，提醒重新登录（401）</span></span><br><span class="line">            response.sendError(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginInterceptor loginInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(loginInterceptor)<span class="comment">//添加拦截器</span></span><br><span class="line">            .addPathPatterns(<span class="string">&quot;/**&quot;</span>)  <span class="comment">//配置拦截路径</span></span><br><span class="line">            .excludePathPatterns(<span class="string">&quot;/sys_user/login&quot;</span>);<span class="comment">//配置排除路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="11-异常统一处理"><a href="#11-异常统一处理" class="headerlink" title="11.异常统一处理"></a>11.异常统一处理</h3><ol><li><p>非前后端分离：当有错误时，统一跳转到一个页面，体验更好。</p><p>前后端分离：当有错误时，后端统一返回json字符串，包括状态码和错误信息。</p></li><li><p>有两种方法：</p><ul><li>HandlerExceptionResolver：实现接口，重写方法。返回值是ModleAndView类型。但是模板引擎用的多，不是重点不推荐。</li><li>@ControllerAdvice注解：更好。</li></ul></li><li><p>步骤：</p><ul><li><p>创建类加上@ControllerAdvice注解进行标识</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyControllerAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义异常处理方法：定义异常处理方法，使用**@ExceptionHandler**标识可以处理的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyControllerAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(RuntimeException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">handlerException</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">        <span class="comment">//获取异常信息，存放如ResponseResult的msg属性</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> e.getMessage();</span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(<span class="number">300</span>,message);</span><br><span class="line">        <span class="comment">//把ResponseResult作为返回值返回，要求到时候转换成json存入响应体中</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="12-获取web原生对象"><a href="#12-获取web原生对象" class="headerlink" title="12.获取web原生对象"></a>12.获取web原生对象</h3><ul><li><p>我们之前在web阶段我们经常要使用到<strong>request对象，response，session对象等</strong>。我们也可以通过SpringMVC获取到这些对象。（不过在MVC中我们很少获取这些对象，因为有更简便的方式，避免了我们使用这些原生对象相对繁琐的API。）</p></li><li><p>我们只需要在方法上添加对应类型的参数即可，但是注意数据类型不要写错了，SpringMVC会把我们需要的对象传给我们的形参。</p></li><li><p><strong>注：如果需要获取就这么写。</strong>之前是只能这么写，获取request，然后获取它的输出流，然后修改。<strong>现在只需要返回一些数据，加上@ResponseBody注解即可。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getRequestAndResponse&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">getRequestAndResponse</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HttpSession session)</span>&#123;</span><br><span class="line">        System.out.println(request);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(<span class="number">200</span>,<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="13-自定义参数解析"><a href="#13-自定义参数解析" class="headerlink" title="13.自定义参数解析"></a>13.自定义参数解析</h3><ol><li><p>解析token，获取解析后包含各种用户信息的对象。例如：在findall接口添加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/findall&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">findAll</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取请求中的token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(token))&#123;</span><br><span class="line">            <span class="comment">//如果有的话，解析并且获取用户id</span></span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtil.parseJWT(token);</span><br><span class="line">            <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> claims.getSubject();</span><br><span class="line">            System.out.println(userId);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;User1&gt; users = service.findAll();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(<span class="number">200</span>,users);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>我们很多接口都需要这种解析获取信息的功能，如果都写就很麻烦，所以这里用到自定义参数解析。</p></li><li><p>如果我们想实现像获取请求体中的数据那样，在Handler方法的参数上增加一个@RepuestBody注解就可以获取到对应的数据的话。可以使用HandlerMethodArgumentResolver来实现自定义的参数解析。</p></li><li><p>如果你想直接<code>findAll(String userId)</code>来获取，是获取不到的，只有请求参数才是这个方式写，所以为了方便的获取userId，我们要用自定义参数解析。 </p></li><li><p>步骤：</p><ul><li><p>定义注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.PARAMETER)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CurrentUserId &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建类实现HandlerMethodArgumentResolver接口并重写其中的方法，<strong>注意加上@Component注解注入Spring容器</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserIdArgumentResolver</span> <span class="keyword">implements</span> <span class="title class_">HandlerMethodArgumentResolver</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断方法参数使用能使用当前的参数解析器进行解析</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> &#123;</span><br><span class="line">        <span class="comment">//如果方法参数有加上CurrentUserId注解，就能把被我们的解析器解析</span></span><br><span class="line">        <span class="keyword">return</span> parameter.hasParameterAnnotation(CurrentUserId.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进行参数解析的方法，可以在方法中获取对应的数据，然后把数据作为返回值返回。方法的返回值就会赋值给对应的方法参数</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取请求头中的token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> webRequest.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.hasText(token))&#123;</span><br><span class="line">            <span class="comment">//解析token，获取userId</span></span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtil.parseJWT(token);</span><br><span class="line">            <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> claims.getSubject();</span><br><span class="line">            <span class="comment">//返回结果</span></span><br><span class="line">            <span class="keyword">return</span> userId;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置参数解析器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArgumentResolverConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserIdArgumentResolver userIdArgumentResolver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addArgumentResolvers</span><span class="params">(List&lt;HandlerMethodArgumentResolver&gt; resolvers)</span> &#123;</span><br><span class="line">        resolvers.add(userIdArgumentResolver);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试：在需要获取UserId的方法中增加对应的方法参数然后使用@CurrentUserId进行标识即可获取到数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserServcie userServcie;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">findAll</span><span class="params">(<span class="meta">@CurrentUserId</span> String userId)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(userId);</span><br><span class="line">        <span class="comment">//调用service查询数据 ，进行返回s</span></span><br><span class="line">        List&lt;User&gt; users = userServcie.findAll();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(<span class="number">200</span>,users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="14-声明式事务"><a href="#14-声明式事务" class="headerlink" title="14.声明式事务"></a>14.声明式事务</h3><ol><li><p>mybatis中有声明式事务依赖</p></li><li><p><strong>事务是一组操作，要么同时成功要么同时失败。</strong>一组中有一个异常就一起回滚。</p></li><li><p>声明式事务直接在需要事务控制的方法上加上对应的注解**@Transactional**（nb）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserServcie</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//添加2个用户到数据库</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>,<span class="string">&quot;sg666&quot;</span>,<span class="number">15</span>,<span class="string">&quot;上海&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>,<span class="string">&quot;sg777&quot;</span>,<span class="number">16</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        userMapper.insertUser(user);</span><br><span class="line">        System.out.println(<span class="number">1</span>/<span class="number">0</span>);</span><br><span class="line">        userMapper.insertUser(user2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="15-AOP"><a href="#15-AOP" class="headerlink" title="15.AOP"></a>15.AOP</h3><ol><li><p>p68和p69反了注意一下</p></li><li><p>AOP：批量地对方法进行增强，没有耦合。一般就是方法调用之前，打印一个日志，调用后打印一个日志来说明调用情况。</p></li><li><p>AOP详细知识学习见：<a href="https://space.bilibili.com/663528522">https://space.bilibili.com/663528522</a>  中的Spring教程。在SpringBoot中默认是开启AOP功能的。如果不想开启AOP功能可以使用如下配置设置为false</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">aop:</span></span><br><span class="line">    <span class="attr">auto:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>使用步骤：</p><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>自定义注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> InvokeLog &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义切面类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span>  <span class="comment">//标识这是一个切面类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InvokeLogAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//确定切点</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.sangeng.aop.InvokeLog)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">printInvokeLog</span><span class="params">(ProceedingJoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="comment">//目标方法调用前</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> signature.getMethod().getName();</span><br><span class="line">        System.out.println(methodName+<span class="string">&quot;即将被调用&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            proceed = joinPoint.proceed();</span><br><span class="line">            <span class="comment">//目标方法调用后</span></span><br><span class="line">            System.out.println(methodName+<span class="string">&quot;被调用完了&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">            <span class="comment">//目标方法出现异常了</span></span><br><span class="line">            System.out.println(methodName+<span class="string">&quot;出现了异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在需要正确的地方增加对应的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserServcie</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@InvokeLog</span>  <span class="comment">//需要被增强方法需要加上对应的注解</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>效果：<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20230101221744066.png" alt="image-20230101221744066"></p></li></ul></li><li><p>切换动态代理：</p><ul><li><p>有的时候我们需要修改AOP的代理方式。我们可以使用以下方式修改：在配置文件中配置spring.aop.proxy-target-class为false这为使用jdk动态代理。该配置默认值为true，代表使用cglib动态代理。</p></li><li><p>修改主配置文件，切换代理方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = false)</span><span class="comment">//修改代理方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(WebApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果想生效还需要在配置文件中做如下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">aop:</span></span><br><span class="line">    <span class="attr">proxy-target-class:</span> <span class="literal">false</span> <span class="comment">#切换动态代理的方式</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="16-模板引擎相关-Thymeleaf（前后端不分离，用的比较少）"><a href="#16-模板引擎相关-Thymeleaf（前后端不分离，用的比较少）" class="headerlink" title="16.模板引擎相关-Thymeleaf（前后端不分离，用的比较少）"></a>16.模板引擎相关-Thymeleaf（前后端不分离，用的比较少）</h3><ol><li><p>都是访问接口，跳转页面，跳转之前把数据存入域对象当中，然后在模板引擎当中从域对象中获取到相应数据，进行渲染然后展示。（我的项目源码有controller但是没有模板引擎相关的html部分，只是看了视频）</p></li><li><p>快速入门：</p><ul><li><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--thymeleaf依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义Controller：在controller中往域中存数据，并且跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThymeleafController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserServcie userServcie;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/thymeleaf/users&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">users</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        List&lt;User&gt; users = userServcie.findAll();</span><br><span class="line">        <span class="comment">//望域中存入数据</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;users&quot;</span>,users);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello thymeleaf&quot;</span>);</span><br><span class="line">        <span class="comment">//页面跳转</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;table-standard&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>html：在<strong>resources\templates</strong>下存放模板页面。在html标签中加上 xmlns:th&#x3D;”<a href="http://www.thymeleaf.org"。获取域中的name属性的值可以使用：">http://www.thymeleaf.org&quot;。获取域中的name属性的值可以使用：</a> ${name}    注意要在th开头的属性中使用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">class</span>=<span class="string">&quot;no-ie&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"> .....</span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span>Kitchen Sink<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>如果需要引入静态资源，需要使用如下写法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/app/css/bootstrap.css&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Vendor CSS--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/vendor/fontawesome/css/font-awesome.min.css&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/vendor/animo/animate+animo.css&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/vendor/csspinner/csspinner.min.css&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- START Page Custom CSS--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- END Page Custom CSS--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- App CSS--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/app/css/app.css&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Modernizr JS Script--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/vendor/modernizr/modernizr.js&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;application/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- FastClick for mobiles--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/vendor/fastclick/fastclick.js&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;application/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>遍历语法：遍历的语法  th:each&#x3D;”自定义的元素变量名称 : ${集合变量名称}” </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;user:$&#123;users&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.address&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="17-整合Redis"><a href="#17-整合Redis" class="headerlink" title="17.整合Redis"></a>17.整合Redis</h3><ol><li><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置Redis地址和端口号</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="comment">#redis服务器ip地址</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span>  <span class="comment">#redis端口号</span></span><br></pre></td></tr></table></figure></li><li><p>注入RedisTemplate使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRedis</span><span class="params">()</span>&#123;</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;三更&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="18-环境切换"><a href="#18-环境切换" class="headerlink" title="18.环境切换"></a>18.环境切换</h3><ol><li>为什么使用profile：<ul><li>在实际开发环境中，我们存在开发环境的配置，部署环境的配置，测试环境的配置等等，里面的配置信息很多时，例如：端口、上下文路径、数据库配置等等，若每次切换环境时，我们都需要进行修改这些配置信息时，会比较麻烦，profile的出现就是为了解决这个问题。它可以让我们针对不同的环境进行不同的配置，然后可以通过激活、指定参数等方式快速切换环境。</li></ul></li><li>使用：<ul><li>创建profile配置文件</li><li>我们可以用<strong>application-xxx.yml</strong>的命名方式 创建配置文件，其中xxx可以根据自己的需求来定义。</li><li>例如：我们需要一个测试环境的配置文件，则可以命名为：<strong>application-test.yml</strong>。需要一个生产环境的配置文件，可以命名为：<strong>application-prod.yml</strong>。我们可以不同环境下不同的配置放到对应的profile文件中进行配置。然后把不同环境下都相同的配置放到application.yml文件中配置。</li></ul></li><li>激活环境：<ul><li>我们可以再<strong>application.yml</strong>文件中使用<strong>spring.profiles.active</strong>属性来配置激活哪个环境。 </li><li>也可以使用虚拟机参数来指定激活环境。例如 ： <strong>-Dspring.profiles.active&#x3D;test</strong></li><li>也可以使用命令行参数来激活环境（打包：注意先引入打包插件，然后cmd：java -jar 文件名 –spring.profiles.active &#x3D;test，最后等于号后面的环境可以改）。例如： <strong>–spring.profiles.active &#x3D;test</strong></li></ul></li></ol><h3 id="19-日志"><a href="#19-日志" class="headerlink" title="19.日志"></a>19.日志</h3><ol><li><p>开启日志：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">debug:</span> <span class="literal">true</span> <span class="comment">#开启日志</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.sangeng:</span> <span class="string">debug</span> <span class="comment">#设置日志级别</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="20-指标监控"><a href="#20-指标监控" class="headerlink" title="20.指标监控"></a>20.指标监控</h3><ol><li><p>我们在日常开发中需要对程序内部的运行情况进行监控， 比如：健康度、运行指标、日志信息、线程状况等等 。而SpringBoot的监控Actuator就可以帮我们解决这些问题。</p></li><li><p>使用：</p><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>访问监控接口：<a href="http://localhost:81/actuator">http://localhost:81/actuator</a></p></li><li><p>配置启用监控端点：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">enabled-by-default:</span> <span class="literal">true</span> <span class="comment">#配置启用所有端点</span></span><br><span class="line"><span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span> <span class="comment">#web端暴露所有端点</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>常用端点:</p></li></ol><ul><li><table><thead><tr><th align="left">端点名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>beans</code></td><td align="left">显示应用程序中所有Spring Bean的完整列表。</td></tr><tr><td align="left"><code>health</code></td><td align="left">显示应用程序运行状况信息。</td></tr><tr><td align="left"><code>info</code></td><td align="left">显示应用程序信息。</td></tr><tr><td align="left"><code>loggers</code></td><td align="left">显示和修改应用程序中日志的配置。</td></tr><tr><td align="left"><code>metrics</code></td><td align="left">显示当前应用程序的“指标”信息。</td></tr><tr><td align="left"><code>mappings</code></td><td align="left">显示所有<code>@RequestMapping</code>路径列表。</td></tr><tr><td align="left"><code>scheduledtasks</code></td><td align="left">显示应用程序中的计划任务。</td></tr></tbody></table></li></ul><ol start="4"><li>图形化界面 SpringBoot Admin:</li></ol><ul><li><p>创建SpringBoot Admin Server应用，要求引入spring-boot-admin-starter-server依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>然后在启动类上加上@EnableAdminServer注解</strong></p></li><li><p>配置SpringBoot Admin client应用：在需要监控的应用中加上spring-boot-admin-starter-client依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>然后配置SpringBoot Admin Server的地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://localhost:8888</span> <span class="comment">#配置 Admin Server的地址</span></span><br></pre></td></tr></table></figure></li><li><p>启动，访问url。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot笔记-1</title>
      <link href="/2022/12/29/Springboot%E7%AC%94%E8%AE%B0-1/"/>
      <url>/2022/12/29/Springboot%E7%AC%94%E8%AE%B0-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Springboot2-5学习笔记-1"><a href="#Springboot2-5学习笔记-1" class="headerlink" title="Springboot2.5学习笔记-1"></a>Springboot2.5学习笔记-1</h1><blockquote><p>三更草堂</p><p>参考三更老师笔记，仅供学习使用，侵删。</p></blockquote><hr><h2 id="1-Springboot是什么？"><a href="#1-Springboot是什么？" class="headerlink" title="1.Springboot是什么？"></a>1.Springboot是什么？</h2><ul><li>简化ssm</li><li>对spring的进一步封装。</li><li>提供了新特性：内嵌web容器，准备好的特性：指标，健康检查，外部化配置。</li><li><strong>最大特点：自动装配，起步依赖。</strong></li></ul><hr><h2 id="2-文档"><a href="#2-文档" class="headerlink" title="2.文档"></a>2.文档</h2><ul><li>推荐学习新技术的快速入门</li><li>不要通读文档，许多用不到</li></ul><hr><h2 id="3-清理Maven的小脚本（小技巧）"><a href="#3-清理Maven的小脚本（小技巧）" class="headerlink" title="3.清理Maven的小脚本（小技巧）"></a>3.清理Maven的小脚本（小技巧）</h2><ul><li><p>当网络不好或者其他原因时，maven下载的依赖不全或出错，进而导致项目出现问题。</p></li><li><p>所以需要这个小脚本来清理lastupdated文件夹，省去自己操作的繁琐。</p></li><li><p>如何使用？：创建.bat脚本文件，将代码换成自己的本地仓库地址，运行。</p></li><li><p>@echo off<br>rem create by NettQun</p><p>rem <em>这里写你的仓库路径（只有这里需要更改）</em><br>set REPOSITORY_PATH&#x3D;E:\Develop\maven_rep<br>rem 在搜索..<br>for &#x2F;f “delims&#x3D;” %%i in (‘dir &#x2F;b &#x2F;s “%REPOSITORY_PATH%*lastUpdated*”‘) do (<br>echo %<br>del &#x2F;s &#x2F;q “%%i”<br>)<br>rem 搜索完毕<br>pause</p></li></ul><hr><h2 id="4-创建工程以及准备环境"><a href="#4-创建工程以及准备环境" class="headerlink" title="4.创建工程以及准备环境"></a>4.创建工程以及准备环境</h2><ol><li>创建empty project</li><li>创建模块moudle，选择maven</li><li>注意java8，maven3.5以上版本</li></ol><hr><h2 id="5-快速入门"><a href="#5-快速入门" class="headerlink" title="5.快速入门"></a>5.快速入门</h2><ol><li><p>继承父工程</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建启动类</p><ul><li><p>创建一个包com.xxx</p></li><li><p>在包中创建一个类并且加上<code>@SpringBootApplication</code>注解，标识为启动类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloApplication</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(string[]args)</span>&#123;</span><br><span class="line">SpringApplication.run (HelloApplication.class,args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringApplication.run (<code>类名（字节码对象）,args（main方法中的参数）</code>)</p><ol><li><p>各种层要创建在启动类所在的包及其子包下</p></li><li><p>在各种层加上注解，如控制层就为<code>@controller</code></p></li><li><p>在控制层内的方法上添加注解<code>@ResultMapping(&quot;/xxx&quot;)</code>指定请求地址</p></li><li><p>小细节：如果一个方法返回字符串，默认是会跳转到这个页面的，如果不想让他跳转而只想显示字符串内容：在方法上再添加<code>@ResponseBody</code>注解。</p><ul><li>还可以优化一下：如果所有返回字符串的方法都想显示在网页上，可以在类上添加注解<code>@controller</code>。</li><li>还可以优化，此时这个类上有@controller和@ResponseBody两个注解，可以优化成<code>@RestController</code>注解。</li></ul></li><li><p>启动，输入localhost：8080&#x2F;+<code>@RestController</code>中的路径，发送请求。</p></li><li><p>因为加上了@Response注解，所有响应的值会在响应体中看到，浏览器f12即可查看。</p><ul><li>controller层：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hel1o&quot;)</span></span><br><span class="line"><span class="keyword">public</span> string <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行启动类的main方法即可</p></li></ol></li></ol><hr><h2 id="6-常见问题以及解决方法"><a href="#6-常见问题以及解决方法" class="headerlink" title="6.常见问题以及解决方法"></a>6.常见问题以及解决方法</h2><ol><li>404无法访问：controller放在启动类所在包及其子包下</li><li>依赖爆红：配置阿里云镜像</li></ol><hr><h2 id="7-SpringBoot打包部署方式"><a href="#7-SpringBoot打包部署方式" class="headerlink" title="7.SpringBoot打包部署方式"></a>7.SpringBoot打包部署方式</h2><ol><li>添加maven插件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--springboot打包插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>maven生命周期package打包，提示<code>build success</code>打包成功，去找打的包所在位置</li><li>在jar包所在的目录下进行cmd<code>java -jar  jar包名称</code>命令进行打包<ul><li>如果在打包过程中不小心点击到哪儿导致进度暂停（因为开启了快速编辑模式，点击页面使cmd认为要进行快速编辑），按下ctrl+c可继续进行</li></ul></li></ol><hr><h2 id="8-SpringBoot项目的快速搭建"><a href="#8-SpringBoot项目的快速搭建" class="headerlink" title="8.SpringBoot项目的快速搭建"></a>8.SpringBoot项目的快速搭建</h2><ol><li>在项目中创建新模块（moudle），选择Spring Initializr</li><li>选择default（本质是spring官方提供的<a href="https://start.spring.io/">快速生成网站</a>），next，设置对应信息</li><li>next，选择要添加的依赖Lombok，spring web， jdbc等。完成。</li><li>更推荐之前的方式</li></ol><hr><h2 id="9-起步依赖：依赖冲突及解决方案"><a href="#9-起步依赖：依赖冲突及解决方案" class="headerlink" title="9.起步依赖：依赖冲突及解决方案"></a>9.起步依赖：依赖冲突及解决方案</h2><ol><li><p>依赖冲突：一般程序在运行时发生类似于java.lang.ClassNotFoundException,Method not found:’…….’,或者莫名其妙的异常信息，这种情况一般很大可能就是j包依赖冲突的问题引起的了。一般在是A依赖C(低版本)，B也依赖C(高版本)。都是他们依赖的又是不同版本的C的时候会出现。</p></li><li><p>解决方案：</p><ul><li>如果出现了类似于java.lang.ClassNotFoundException,Method not found:这些异常检查相关的依赖冲突问<br>题，排除掉低版本的依赖，留下高版本的依赖。</li><li>点击maven的<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221226231940947.png" alt="image-20221226231940947">图标，即可查看依赖关系，会有红线方便排查项目。</li><li>maven helper插件，在idea底部也可以显示：进入插件，选中红色报错，右键exclude即可解决。<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221226232426284.png" alt="image-20221226232426284"></li><li>然后refresh刷新</li><li>原理？-&gt;添加exclusions排除标签</li></ul></li><li><p>版本锁定：</p><ul><li><p>比如：以下这个依赖没有写版本号，为什么呢？</p></li><li><p>&#96;&#96;&#96;xml</p><parent>    <groupId>org.springframework.boot</groupId>    <artifactId>spring-boot-starter-parent</artifactId>    <version>2.5.1</version></parent><dependencies>    <dependency>        <groupId>org.springframework.boot</groupId>        <artifactId>spring-boot-starter-web</artifactId>    </dependency></dependencies><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 因为父工程的dependency父工程已经规定好了，避免依赖冲突，并且好写。默认用父工程版本号</span><br><span class="line"></span><br><span class="line">- 也可以在子工程依赖中添加version标签，或者子工程properties标签下的xxx.version标签规定版本号，一般来说用父工程版本就行了。</span><br><span class="line"></span><br><span class="line">  ```xml</span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">  &lt;aspectj.version&gt;1.7.2&lt;/aspectj.version</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line">      </span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>starter机制</p><ul><li><p>当我们需要使用某种功能时只需要引入对应的starterl即可。一个starter针对一种特定的场景，其内部引入了该<br>场景所需的依赖。这样我们就不需要单独引入多个依赖了。</p></li><li><p>命名规律：</p><ul><li><p>官方starter都是以<code>spring-boot-starter</code>开头后面跟上场景名称。例如：spring-boot-starter-data-jpa</p></li><li><p>非官方starterl则是以<code>场景名-spring-boot-starter</code>的格式，例如：mybatis-spring-boot-starter</p></li><li><p>官方不加版本号，非官方加</p></li><li><p>比如：下面这个starter包含许多依赖</p></li><li><p>&#96;&#96;&#96;xml</p><dependency>        <groupId>org.springframework.boot</groupId>        <artifactId>spring-boot-starter-web</artifactId></dependency><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line">## 10.自动配置</span><br><span class="line"></span><br><span class="line">1. 约定优于配置：自动进行默认配置，不用做大量配置</span><br><span class="line">2. 如果有需要想要修改默认配置，可以修改这部分配置</span><br><span class="line">3. 如何自定义？源码解析</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">## 11.YAML/YML</span><br><span class="line"></span><br><span class="line">1. 简介：.yml后缀文件，序列化格式，专门用来写配置文件的语言，完成xml的任务，更简洁。</span><br><span class="line"></span><br><span class="line">2. 语法：</span><br><span class="line"></span><br><span class="line">   - `k: v`的键值对关系，**冒号后必须跟一个空格**。</span><br><span class="line"></span><br><span class="line">   - 空格缩进表示层级，缩进多少不重要，**左对齐的一列数据是同一层级数据。**</span><br><span class="line"></span><br><span class="line">     如：</span><br><span class="line"></span><br><span class="line">     ```yaml</span><br><span class="line">     student:</span><br><span class="line">         name: sangeng</span><br><span class="line">         age: 15</span><br><span class="line">     #name和age就是同一层级</span><br></pre></td></tr></table></figure></li></ul></li><li><p>大小写敏感，缩进不允许tab，只允许空格，idea可以空格。</p></li><li><p>java的驼峰命名，再yml中和-一样：lastName&#x3D;last-name</p></li><li><p>单引号不专义（只转义特殊字符），双引号转义。</p></li><li><p>日期： 年&#x2F;月&#x2F;日</p></li><li><p>对象：属性和值，Map:键值对</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#多行写法</span></span><br><span class="line"><span class="attr">student:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sangeng</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">15</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#行内写法</span></span><br><span class="line"><span class="attr">student:</span> &#123;<span class="attr">name:</span> <span class="string">zhangsan</span>,<span class="attr">age:</span> <span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组，list，set</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多行写法</span></span><br><span class="line"><span class="attr">pets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pig</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"><span class="comment"># 行内</span></span><br><span class="line"><span class="attr">pets:</span> [<span class="string">dog</span>,<span class="string">pig</span>,<span class="string">cat</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意 - xxx的空格，注意pets: []的空格</span></span><br></pre></td></tr></table></figure></li><li><p>对象数组、对象list、对象set</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">students:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">zhangsan</span><span class="comment">#多行</span></span><br><span class="line">   <span class="attr">age:</span> <span class="number">22</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lisi</span></span><br><span class="line">   <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line"> <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">wangwu</span>,<span class="attr">age:</span> <span class="number">18</span>&#125;<span class="comment">#行内</span></span><br></pre></td></tr></table></figure></li><li><p>占位符赋值</p><p>使用 <strong>${key:defaultValue}</strong> 的方式来赋值，若key不存在，则会使用defaultValue来赋值。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">$&#123;myPort:88&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">myPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="12-SpringBoot读取YML配置"><a href="#12-SpringBoot读取YML配置" class="headerlink" title="12.SpringBoot读取YML配置"></a>12.SpringBoot读取YML配置</h2><ol><li><p>@Value注解：此注解只能获取简单类型的值（8种基本数据类型及其包装类，String,Date）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">student:</span></span><br><span class="line">  <span class="attr">lastName:</span> <span class="string">liming</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;student.lastName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(lastName);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：加了@Value的类必须是交由Spring容器管理的</strong>（也就是说，必须有@RestController注解）</p></li><li><p><strong>@ConfigurationProperties注解：</strong>解决了@Value注解单个单个标注的弊端。 在类上添加注解@Component（将这个类注册到spring容器中）和@ConfigurationProperties(prefix &#x3D; “配置前缀”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项：要求对应的属性要有set&#x2F;get方法，并且key要和成员变量名一致才可以对应的上。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Student student;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(student);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>lombok小使用</p><ul><li>安装插件，导入依赖</li><li>以下注解放在实体类上</li><li>@Data：生成getter&#x2F;setter方法</li><li>@AllArgsConstructor：提供全参构造</li><li>@NoArgsConstructor：提供无参构造</li></ul></li><li><p>yml小细节：</p><ul><li><p>yaml和properties可以相互转换，转换网站：<a href="https://www.toyaml.com/index.html">https://www.toyaml.com/index.html</a></p></li><li><p>配置提示：springboot会提醒你加配置提示</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221228160110149.png" alt="image-20221228160110149"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--打开网站添加注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加了之后重启一下项目（运行一下程序）就会有yml配置提示</p></li><li><p>工作中最常用的是配置其他框架的配置：<strong>千万注意数据类型！</strong>配置时ctrl按住左键，点进去，查看数据类型，填写正确的数据类型。</p></li></ul></li></ol></li></ol><h2 id="12-热部署"><a href="#12-热部署" class="headerlink" title="12.热部署"></a>12.热部署</h2><ol><li><p>dev-tools：启动时间短，重启更快</p></li><li><p>idea自动编译打开，然后允许程序运行期间自动重启</p></li><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>触发自动编译：打开其他软件（比如浏览器）小小等待一下，idea在后台自动编译。</p></li><li><p>没触发的话build project或者ctrl+f9</p></li></ol><h2 id="13-SpringBoot整合Junit"><a href="#13-SpringBoot整合Junit" class="headerlink" title="13.SpringBoot整合Junit"></a>13.SpringBoot整合Junit</h2><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>编写测试类：写在test文件夹下的java文件夹中创建包，要与启动类的结构一致（因为SpringBoot是从启动类所在的路径开始扫描文件的）</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sangeng.controller.HelloController;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span><span class="comment">//如果测试类放的包的位置不对可以将注解改成指定启动类如：@SpringBootTest(classes = Application.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloController helloController;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJunit</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="number">1</span>);</span><br><span class="line">        System.out.println(helloController);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>测试类的作用：就是从spring容器中获取mapper或者service来测试功能，需要获取一下：就是@Autowired或者@Resource自动注入一下。后面一般是测试service。</p></li><li><p>如何兼容老版本？(junit4和junit5差别较大)：2.2.0之前的springboot就是默认junit4，怎么兼容呢?—&gt;</p></li></ol><ul><li>将原来的import的路径删掉，引入旧的。</li><li>在<code>@SpringBootTest</code>注解下添加一个<code>@RunWith(SpringRunner.class)</code>注解，才能在容器中获取的到</li></ul><p> 老版本如何兼容新版本？</p><p> <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221229102118768.png" alt="image-20221229102118768"><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221229103255010.png" alt="image-20221229103255010"></p><ul><li><p>所以我们需要添加vintage依赖来兼容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>加好了之后，老版本自动兼容，直接运行就好</p></li><li><p>总之：<strong>org.junit.Test对应的是Junit4的版本，就搭配@RunWith注解来使用。</strong>使用场景：<strong>之前代码是老版本不想做过多修改就用这套方法。</strong>新项目不用管。</p></li></ul></li></ol><h2 id="14-SpringBoot整合MyBatis"><a href="#14-SpringBoot整合MyBatis" class="headerlink" title="14.SpringBoot整合MyBatis"></a>14.SpringBoot整合MyBatis</h2><ol><li><p>准备工作：创建数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Table structure for table `user` */</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `address` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">10</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Data for the table `user` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `<span class="keyword">user</span>`(`id`,`username`,`age`,`address`) <span class="keyword">values</span> (<span class="number">2</span>,<span class="string">&#x27;pdd&#x27;</span>,<span class="number">25</span>,<span class="string">&#x27;上海&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;UZI&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;上海11&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;RF&#x27;</span>,<span class="number">19</span>,<span class="keyword">NULL</span>),(<span class="number">6</span>,<span class="string">&#x27;三更&#x27;</span>,<span class="number">14</span>,<span class="string">&#x27;请问2&#x27;</span>),(<span class="number">8</span>,<span class="string">&#x27;test1&#x27;</span>,<span class="number">11</span>,<span class="string">&#x27;cc&#x27;</span>),(<span class="number">9</span>,<span class="string">&#x27;test2&#x27;</span>,<span class="number">12</span>,<span class="string">&#x27;cc2&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span>;</span><br></pre></td></tr></table></figure></li><li><p>创建对应实体类</p></li><li><p>整合mybatis</p><ul><li><p>添加依赖：注意需要自己写版本号（因为不是官方的），查看官方文档写版本号，github: <a href="https://github.com/mybatis/spring-boot-starter/">https://github.com/mybatis/spring-boot-starter/</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis启动器--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在yaml配置数据库信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure></li><li><p>配置mybatis相关配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*Mapper.xml</span> <span class="comment"># mapper映射文件路径</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.sangeng.domain</span>   <span class="comment"># 配置哪个包下的类有默认的别名</span></span><br></pre></td></tr></table></figure></li><li><p>写接口在<strong>com.xxx.mapper包</strong>中：<strong>注意加上@Mapper 和@Repository这俩注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意加上这俩注解</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写&#x2F;mybatisx插件生成在<strong>resource&#x2F;mapper文件夹</strong>中，编写mapper接口对应的xml文件<em>xxMapper</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.sangeng.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sangeng.domain.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">&lt;/mapper</span><br></pre></td></tr></table></figure></li><li><p>编写junit测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = HelloApplication.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMyTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tesMapper</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(userMapper.findAll());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注：idea小问题（虽然运行没问题）–&gt;因为视频在测试的时候mapper接口没有添加**@Repository注解<strong>，springboot找不到注入的对应的bean，实际上mybatis整合包帮我们自动注入了已经。—&gt;解决方法，加</strong>@Repository注解**：标识是什么层（比如controller加@Controller注解），把对应的对象放到spring容器中。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221229120554458.png" alt="image-20221229120554458"></p></li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb笔记</title>
      <link href="/2022/12/24/JavaWeb%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/12/24/JavaWeb%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JavaWeb笔记"><a href="#JavaWeb笔记" class="headerlink" title="JavaWeb笔记"></a>JavaWeb笔记</h1><hr><h2 id="1-js简单复习"><a href="#1-js简单复习" class="headerlink" title="1. js简单复习"></a>1. js简单复习</h2><h3 id="1-鼠标悬停效果实现"><a href="#1-鼠标悬停效果实现" class="headerlink" title="1. 鼠标悬停效果实现"></a>1. 鼠标悬停效果实现</h3><ol><li><p>在head标签中的script标签中引入</p></li><li><p>在tr标签中： onmouseover&#x3D;”调用的方法()”</p></li><li><p>方法中的event：当前发生的事件，event.srcElement：事件源</p></li><li><p>onmouseout：当鼠标离开时</p></li><li><p>系统提供的对象：window：当前浏览器窗口，窗口显示的所有内容叫document(给定浏览器窗口中的html文档)，浏览器上面的导航栏叫location</p></li><li><p>&#96;&#96;&#96;js<br>window.onload&#x3D;fuction(){<br>&#x2F;&#x2F;当页面加载完成，需要绑定各种事件，举例：<br>var fruitTabl&#x3D;document.getElementById(“tb_fruit”);  &#x2F;&#x2F;通过document对象获取fruit表<br>var rows&#x3D;fruitTabl.rows;&#x2F;&#x2F;获取表格行数<br>for(var i&#x3D;0;i&lt;rows.length;i++){<br>    var tr&#x3D;rows[i];&#x2F;&#x2F;循环获取每一行的所有列<br>    tr.onmouseover&#x3D;showBGColor;&#x2F;&#x2F;1.绑定鼠标悬浮设置背景颜色事件（事件绑定）<br>}<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 2.更新单价</span><br><span class="line"></span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line">## 2.servlet</span><br><span class="line"></span><br><span class="line">### 1.tomcat</span><br><span class="line"></span><br><span class="line">![image-20221105154230267](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221105154230267.png)</span><br><span class="line"></span><br><span class="line">### 2.快速入门</span><br><span class="line"></span><br><span class="line">1. 获取参数：用户在网站输入发请求：如`action=add`</span><br><span class="line">2. 项目中*web.xml*找到`url-pattern= /add` 然后找到`servlet-name = AddServlet`，找到和`servlet-mapping`中同名的`servlet-name`，然后找`servlet-class`的路径来找到对应的类</span><br><span class="line">3. 看用户发送的请求，用户发送的是`method = post`请求，故tomcat会执行servlet类中的`doPost`方法![image-20221106155105816](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221106155105816.png)</span><br><span class="line"></span><br><span class="line">4. 新建项目：</span><br><span class="line"></span><br><span class="line">- 新建模块，在模块中添加web模块，创建arctifact-部署包（war包：web项目的压缩包）</span><br><span class="line">- lib-artifact：现有artifact，后来才添加jar包（javaapi的包），此时，jar包并没有添加到部署包中。在projectStructure中会有提示。在problems中的fix可以添加。</span><br><span class="line">- 默认的`localhost/项目`访问的是欢迎页`index.xml`，在tomcat中的web.xml可以设置&lt;welcome-file-list&gt;标签里面的值来更改欢迎页访问谁，默认是`index.html`。或者在自己的web.xml中设置也行。</span><br><span class="line"></span><br><span class="line">5. 修改请求参数中的中文乱码问题：</span><br><span class="line"></span><br><span class="line">- post方式下`String fname = request.getParameter(&quot;fname&quot;)`之前，需要先设置一下编码，`request.setCharacterEncoding(&quot;UTF-8&quot;)` (request就是浏览器的请求，对应这个项目就是表单提交请求，也就是点击添加按钮)。</span><br><span class="line">- get方式基于tomcat8，不需要设置编码。</span><br><span class="line">- 注意：设置编码那句话必须在获取参数之前，否则已经获取到乱码了就不能再改了。</span><br><span class="line"></span><br><span class="line">### 3.servlet继承关系以及service方法</span><br><span class="line"></span><br><span class="line">1. ![image-20221106164526027](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221106164526027.png)</span><br><span class="line"></span><br><span class="line">2. ![image-20221106164715063](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221106164715063.png)</span><br><span class="line"></span><br><span class="line">3. **service方法：**</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  String method = req.getMethod();//获取请求的方式</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>获取完之后，if判断，请求是哪个就执行 <code>doXXX</code>方法。</p></li><li><p>当执行方法时，默认你重写了父类的doXXX方法，而重写的方法是<code>super.(req,res)</code>即默认是调用父类的方法。或者你没写doXXX方法，也会调用父类的方法。而父类的方法会通过获取协议值来判断是否<code>sendError(405/400,msg)</code>msg是通过support的key值来获取的报错信息。</p></li></ul><ol start="4"><li>servlet的生命周期：</li></ol><ul><li><p>servlet是tomcat容器帮我们去维护，自动调用方法</p></li><li><p>生命周期：从出生到死亡的过程，init()初始化——–&gt;service()服务———&gt;destroy()销毁。</p></li><li><p>只有第一次发请求的时候会初始化，即调用init()方法。servlet会进行实例化，初始化，然后服务，service()。</p></li><li><p>容器的销毁会调用destroy()销毁方法</p></li><li><p>Servlet实例tomcat，只会创建一个，所有的请求都是这个实例去响应。默认情况下，第一次请求时，tomcat才会去实例化，初始化，然后再服务。可以提高系统的启动速度。缺点：第一次请求时耗时较长。</p></li><li><p>如果想提高初始化速度，可以设置servlet的初始化时机：在servlet标签中添加<load-on-startup>标签，将标签内容设置为1，数字越小，启动的时间越靠前。设置了1之后tomcat直接启动并且创建。</p></li><li><p>servlet在容器中是单例的（单个的实例，不管几个请求，都是同一个），线程不安全的。线程不安全：一个线程需要根据这个实例中的某个成员变量值去做逻辑判断。但是在中间某个时机，另一个线程改变了这个成员变量的值，从而导致第一个线程的执行路径发生了变代。线程不安全，我们尽量不要在servlet中定义成员变量的值，不得不定义的话也不要去修改成员变量的值。<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221107092104315.png" alt="image-20221107092104315"></p></li></ul><h3 id="4-HTTP协议"><a href="#4-HTTP协议" class="headerlink" title="4.HTTP协议"></a>4.HTTP协议</h3><h4 id="1-请求和响应："><a href="#1-请求和响应：" class="headerlink" title="1.请求和响应："></a>1.请求和响应：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221107140510757.png" alt="image-20221107140510757"><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221107140904530.png" alt="image-20221107140904530"></p><h4 id="2-会话："><a href="#2-会话：" class="headerlink" title="2.会话："></a>2.会话：</h4><h5 id="1-http无状态："><a href="#1-http无状态：" class="headerlink" title="1. http无状态："></a>1. http无状态：</h5><ul><li>HTTP会无状态，服务器无法判断这两次请求是同一个客户端发过来的，还是不同的客户端发过来的。</li><li>现实问题举例：第一次请求是添加商品到购物车，第二次请求是结账；如果这两次请求服务器无法区分是同一个用户的，就会导致混乱。</li><li>如何解决？——————-&gt;通过会话跟踪技术来解决无状态的问题。</li></ul><h5 id="2-会话跟踪技术："><a href="#2-会话跟踪技术：" class="headerlink" title="2.会话跟踪技术："></a>2.会话跟踪技术：</h5><ul><li>客户端第一次发请求给服务器，服务器会找请求要session（服务器获取session），获取不到，则创建新的，然后告诉客户端他的sessionid是什么（服务器响应给客户端）</li><li>下次客户端给服务器发送请求时，会把sessionid带给服务器，服务器这次获取就可以获取到，那么服务器就判断这次请求是不是和之前的某次请求时同一客户端，从而区分不同的客户端，解决http无状态的问题。<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221107143752797.png" alt="image-20221107143752797"></li></ul><h5 id="3-保存作用域："><a href="#3-保存作用域：" class="headerlink" title="3.保存作用域："></a>3.保存作用域：</h5><ul><li><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221107145642266.png" alt="image-20221107145642266"></p></li><li><p>同一客户端的（浏览器）session可以互相获取，不同的不行。同一webapp可以获取，不同的不行。session的作用域保存session的id和k，v值，可以存放n个kv值，但是重命名key，value值会被覆盖掉。</p></li></ul><h5 id="4-内部转发和重定向"><a href="#4-内部转发和重定向" class="headerlink" title="4.内部转发和重定向"></a>4.内部转发和重定向</h5><ul><li><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221107150233141.png" alt="image-20221107150233141"></p></li><li><p>服务器内部转发：一次请求响应的过程，对于客户端而言，内部经过了多少次转发，客户端是不知道的。地址栏没有变化。<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221107151946455.png" alt="image-20221107151946455"></p></li><li><p>重定向：两次请求响应的过程，客户端肯定知道URL有变化。地址栏有变化。<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221107152107657.png" alt="image-20221107152107657"></p></li></ul><h3 id="5-Thymeleaf-视图模板技术"><a href="#5-Thymeleaf-视图模板技术" class="headerlink" title="5. Thymeleaf-视图模板技术"></a>5. Thymeleaf-视图模板技术</h3><h4 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1.快速入门"></a>1.快速入门</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221107154822964.png" alt="image-20221107154822964"></p><ul><li>servlet从3.0开始支持注解方式的注册，在servlet类前直接标注<code>@WebServlet（&quot;/路径&quot;）</code>，省去在web.xml中配置映射路径等步骤。</li><li>Thymeleaf：添加jar包，然后再在web.xml文件中配置。然后cv  ViewBaseServlet：processTemplate方法，处理模板——&gt;完成资源的转发和数据的渲染。</li><li>然后在web.xml中添加配置，配置视图前后缀。<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221107163539552.png" alt="image-20221107163539552"></li></ul><h4 id="2-渲染index页面"><a href="#2-渲染index页面" class="headerlink" title="2.渲染index页面"></a>2.渲染index页面<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221107170518192.png" alt="image-20221107170518192"></h4><ul><li>通过thymeleaf语法，判断session中的fruitList是否为空。不为空：将list中的每一个元素迭代取出来。在每一列进行渲染，数据库中取出的元素动态放在对应的列。</li></ul><h4 id="3-thymeleaf-review"><a href="#3-thymeleaf-review" class="headerlink" title="3.thymeleaf review"></a>3.thymeleaf review</h4><p>知识点集合，上面都有，略。</p><h4 id="4-保存作用域"><a href="#4-保存作用域" class="headerlink" title="4.保存作用域"></a>4.保存作用域</h4><ol><li>原始情况下，我们认为有四个：page（页面级别，现在几乎不用)，request(一次请求响应范围),session(一次会话范围)，application(整个应用程序范围）</li><li><ul><li>request：一次请求响应范围：第一个重定向取不到值，因为是重定向，相当于两次响应。第二个可以取到值，因为是请求转发，一次响应，故可以取到值。<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221109142143712.png" alt="image-20221109142143712"></li><li>session：一次会话范围，只要session没有过期失效，不管采取的是哪种方式，都可以获取到。但是面对图下情况，两个客户端分别访问不同的servlet，不可以获取到，因为不是同一个session。 <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221109143129002.png" alt="image-20221109143129002"></li><li>application：整个应用程序范围，相当于是公共的，不同客户端都可以取到。需要获取application保存作用域保存的数据：servlet上下文<code>ServletContext application = request.getServletContext();</code><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221109144201882.png" alt="image-20221109144201882"></li></ul></li></ol><h4 id="5-路径问题"><a href="#5-路径问题" class="headerlink" title="5.路径问题"></a>5.路径问题</h4><p>相对路径和绝对路径，略。<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221109151417746.png" alt="image-20221109151417746">需要注意的是可以写成下面那两行那样的：@{}就相当于<code>localhost：8080/pro10/</code>了</p><h4 id="6-小实战1（2-3-4跳）"><a href="#6-小实战1（2-3-4跳）" class="headerlink" title="6.小实战1（2 3 4跳）"></a>6.小实战1（2 3 4跳）</h4><ol><li>只要不是<em><strong>form表单提交，或者method&#x3D;post</strong></em>，都是<em><strong>get请求</strong></em>。</li><li>隐藏域：功能类似于文本框，它的值会随着表单的发送也会发送给服务器，但是界面上看不到。</li></ol><h4 id="7-review-和234有关"><a href="#7-review-和234有关" class="headerlink" title="7.review(和234有关)"></a>7.review(和234有关)</h4><h3 id="6-servlet-mvc优化（重要）"><a href="#6-servlet-mvc优化（重要）" class="headerlink" title="6.servlet-mvc优化（重要）"></a>6.servlet-mvc优化（重要）</h3><h4 id="1-旧的结构："><a href="#1-旧的结构：" class="headerlink" title="1.旧的结构："></a>1.旧的结构：<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221110110700389.png" alt="image-20221110110700389"></h4><h4 id="2-新的结构："><a href="#2-新的结构：" class="headerlink" title="2.新的结构："></a>2.新的结构：<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221110144853740.png" alt="image-20221110144853740"></h4><ul><li>将几个servlet进行功能集合：将增删改查几个功能做成方法集成在一个servlet中。</li><li>通过if判断：如果请求是空的，那么就赋给请求”index”，进入index页面。如果请求不是空的，进入switch语句判断：是什么就进入对应什么的页面。</li></ul><h4 id="3-修改："><a href="#3-修改：" class="headerlink" title="3.修改："></a>3.修改：</h4><p>不用switch语句，而用method属性进行获取方法，遍历methods方法列表进行if判断：如果方法名和operate值相等，就用反射执行这个语句。但是会有弊端：这只是一个servlet中遍历各种方法，如果是多个servlet呢？每个servlet都要写反射吗？——&gt;引出<strong>DispatcherServlet：核心控制器&#x2F;中央控制器</strong>：处理所有请求，根据请求的不同来赋值给后面的不同servlet，再根据不同的servlet赋值给不同的方法上去。</p><h4 id="4-引出mvc原理："><a href="#4-引出mvc原理：" class="headerlink" title="4.引出mvc原理："></a>4.<em><strong>引出mvc原理</strong></em>：<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221110153737609.png" alt="image-20221110153737609"></h4><ol><li>servlet接收<code>*.do</code>:意思是所有的访问请求都会由这个servlet进行接收处理。</li><li>获取该请求的servletpath，比如 &#x2F;hello.do</li><li>进行字符串截取：&#x2F;hello.do——&gt;hello</li><li>对应下级servlet（controller）：hello——–&gt;helloController，此时helloservlet将不复存在，而是把原来的servlet类改为普通类。<em><strong>那么如何对应controller？</strong></em>：通过配置文件<em><strong>applicationContext.xml</strong></em>进行约定——&gt;JavaBeans:设置<bean>标签的id和class属性，作用：servletPath中涉及的名字对应的是你设置的这个id，就用class路径对应的controller类来处理。<em><strong>约定好了applicationContext.xml如何将DispatcherServlet联系起来？</strong></em>——–&gt;通过DispatcherServlet的构造方法，用流获取applicationContext.xml文件的内容：然后<ul><li>创建DocumentBuilderFactory对象</li><li>创建DocumentBuilder对象</li><li>创建Document对象（org.3c.dom）,传入配置文件的流。</li><li>获取所有的bean节点：调用对象的方法getElementsByTagId并传入bean，得到beanNodeList</li><li>for循环这个List获取每一个节点然后进行if判断，如果这个节点是元素节点，就获取它的id和name属性，通过name（全类名），找到它的对象，<strong>再把id和这个对象存入hashmap中（即解析好后放入map容器中）</strong>。</li><li><em><strong>总结：</strong></em>这样通过<bean>中的标签设定，通过DispatcherServlet能直接由路径找到对应的controller，然后再用笔记6.3中的步骤（<em><strong>赋operate的值</strong></em>），获取这个controller中的对应方法，然后反射执行，<strong>即：设置<bean>标签中的id和controller的全类名，就可以直接通过访问路径来执行对应controller。</strong><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221110171221576.png" alt="image-20221110171221576"></li></ul></li></ol><h4 id="5-提取视图资源通用代码："><a href="#5-提取视图资源通用代码：" class="headerlink" title="5.提取视图资源通用代码："></a>5.提取视图资源通用代码：</h4><p>继续修改：</p><ul><li>因为controller中每个方法都要重定向，不妨放在DispatcherServlet进行统一调度：即controller中方法结束直接return “redirect:xxx页面”（视频中的更新功能要给用户展示更新后的界面，因此更新方法最后需要跳转进入fruit界面，也就是刷新一下fruit界面）</li><li>然后在DispatcherServlet获取该方法的反射调用后的返回值</li><li>然后进行视图处理：也就是在DispatcherServlet中进行真正的重定向。如果返回值没有redirect前缀，则直接进入页面。</li></ul><h4 id="6-在DispatcherServlet中统一获取参数以及视图处理："><a href="#6-在DispatcherServlet中统一获取参数以及视图处理：" class="headerlink" title="6.在DispatcherServlet中统一获取参数以及视图处理："></a>6.在DispatcherServlet中统一获取参数以及视图处理：</h4><ol><li>将在controller中的各种方法中的<code>request.getParameter(&quot;xxx&quot;)</code>删除，转而在形参列表获取参数（此时还没有将request中的字段和形参列表的参数联合起来），降低耦合。</li><li>在DispatcherServlet中统一获取参数：先for循环获取所有方法，然后每个方法用<code>method.getParameters()</code>获取当前方法的形参，返回的是数组，需要设置（因为数组中显示的是arg0，arg1…而不是显示形参的名字：在idea中设置build–&gt;java compiler<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221112140308195.png" alt="image-20221112140308195">并且添加如图参数)，这样就能获取方法的形参。</li><li>再遍历<code>2.</code>中获取的数组，循环得到方法的名字（<code>2.</code>中返回的是对象）</li><li>再判断获取的形参属于什么类型（request？response？session？），那么就不是通过请求中获取参数的方式了。</li><li><strong>总结：在controller中不需要先获取request中的parameter了，只需在形参列表规定好，DispatcherServlet会自动获取。</strong></li></ol><h4 id="7-总结："><a href="#7-总结：" class="headerlink" title="7.总结："></a>7.总结：</h4><h5 id="1-优化总结："><a href="#1-优化总结：" class="headerlink" title="1.优化总结："></a>1.优化总结：</h5><ol><li>开始是一个请求对应一个servlet，会导致servlet过多——&gt;<strong>用一个servlet判断，通过operate的值来决定调用servlet中的哪个方法(controller)。</strong></li><li>servlet如何调用方法？—–&gt;<strong>判断operate的赋的值和方法名是否一致：一致就反射调用，否则抛异常。</strong></li><li>每个servlet都反射，如何优化？—-&gt;<strong>设置中央控制器DispatcherServlet</strong></li><li>DispatcherServlet都有何功能？——&gt;</li></ol><h5 id="2-DispatcherServlet的功能："><a href="#2-DispatcherServlet的功能：" class="headerlink" title="2.DispatcherServlet的功能："></a>2.<strong>DispatcherServlet的功能：</strong></h5><ol><li><ul><li><strong>通过访问路径和读取applicationContext.xml</strong>(通过dom技术去解析xml文件，在中央控制器形成一个beanMap容器，用来存放所有的Controller组件)<strong>的设置，匹配到对应controller。</strong></li><li><strong>然后根据operate的值，通过反射调用controller中的对应方法。</strong></li></ul></li><li><ul><li>获取参数，也就是<strong>直接读取形参列表的参数，直接在形参列表设置要读取的request字段</strong>：获取即将要调用的方法的参数签名信息存放在数组，然后获取名称，参数值。通过获取类型，还要考虑类型转换。</li><li><strong>执行方法</strong>：通过反射执行方法。</li><li>视图处理：获取反射的返回值，如果返回值的字符串匹配”redirect:xxx”，就重定向哪，否则匹配xxx，就…，以此类推。也就是<strong>根据方法的返回值字符串来完成跳转的操作。</strong></li></ul></li></ol><h3 id="7-servlet-api"><a href="#7-servlet-api" class="headerlink" title="7.servlet-api"></a>7.servlet-api</h3><h4 id="1-servlet初始化："><a href="#1-servlet初始化：" class="headerlink" title="1.servlet初始化："></a>1.servlet初始化：</h4><ul><li>如果我们想在servlet初始化阶段带一些值，可以重写init()。</li><li>前提是要在web.xml中的servlet标签中配置<init-param>的kv值，然后再init方法中获取config对象，获取初始化参数值（v值）。</li><li>或者使用注解也可以，<code>@WebServlet(urlPatterns=&#123;&quot;xxxx&quot;&#125;,initParams=&#123;@WebInitParam(name=&quot;xxx&quot;,value=&quot;xxx&quot;),@WebInitParam....以此类推&#125;)</code></li></ul><h4 id="2-servlet上下文设置一些值："><a href="#2-servlet上下文设置一些值：" class="headerlink" title="2.servlet上下文设置一些值："></a>2.servlet上下文设置一些值：</h4><ul><li>在web.xml中配置<context-param>，设置kv值。可以再初始化中获取：getServletContext()。</li><li>在服务方法中也可以通过request对象获取：req.getSession.getServletContext。</li><li>获取初始化值servletContext.getInitParameter()。</li></ul><h2 id="3-mvc-service的引入"><a href="#3-mvc-service的引入" class="headerlink" title="3.mvc-service的引入"></a>3.mvc-service的引入</h2><ol><li>什么是业务层：</li></ol><ul><li>model1(jsp)和model2(mvc),mvc：<em><strong>mode</strong>l(有很多种，简单的pojo，难的如业务模型组件，数据访问层组件：</em>*pojo&#x2F;vo，dao,bo**，bo是业务模型组件),<strong>view</strong>(视图，网页，和用户交互),<strong>controller</strong>(控制器，接待请求)*。</li><li>区分业务对象和数据访问对象：dao中的方法都是<strong>单精度方法</strong>（一个方法只考虑一个操作），bo中的方法是复杂的业务方法，如注册功能，需要多个dao方法的组合调用，才能完成这个功能。</li></ul><ol start="2"><li>引入业务层<strong>（重点）</strong>：</li></ol><ul><li><p><strong>为什么要有业务层？</strong>：以前调用controller里面的各种业务方法，业务方法里还有很多dao层方法重复写，会让controller方法代码冗余。现在在controller层和dao层中添加service层，<strong>许多dao层方法的调用集合到service层</strong>，<strong>controller层调用service层的方法</strong>实现更复杂的业务逻辑。实现了解耦。<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221114094409956.png" alt="image-20221114094409956"></p></li><li><p><strong>ioc</strong>：<strong>耦合&#x2F;依赖</strong>：层与层的设计是依赖的，不能离开，也叫耦合。系统架构和设计的一个原则是：<em>高内聚，低耦合。</em></p></li><li><p>以前是在controller中new xxxServiceImpl，才能调用service方法，现在为了降低耦合———&gt;如何做？</p></li><li><p><strong>如何反射创建对象？</strong>—-&gt;io流读取applicationContext.xml，创建document对象，获取bean节点，放入map容器中。（前文中有讲过）</p></li><li><p><strong>原理1（重点！）</strong>：在applicationContext.xml中配置bean，bean就是组件，spring通过<strong>控制反转</strong>（<strong>创建好Map容器，反射创建对象，放入map中，key是对象名，value是创建好的对象。</strong>beanFacatory接口中定义getbean方法，在ClassPathXmlApplicationContext中实现：<strong>根据id从map容器中获取对象</strong>。），bean的id是对象名，class是哪个类的对象。</p></li><li><p>修改dispatcherservlet：在其中的初始化方法中添加beanFactory对象，即当dispatcherservlet加载时自动创建beanFactory对象。</p></li><li><p><strong>原理2（原理1是知道了需要哪些组件，但是还不知道组件和组件之间的关系）</strong>：在<bean>标签中设置属性，即用<property>标签设置：<name>是属性名，<ref>是引用其他bean的id值。即描述<strong>bean之间的调用关系</strong>。</p></li><li><p><property>标签的<strong>调用关系是怎么实现</strong>的？——&gt;承接上文，在ClassPathXmlApplicationContext中获取对象之后，需要组装bean之间的依赖关系：for循环拿到每一个bean（map中的对象），读取bean中的内容（怎么读取？再次for循环，判断是否为元素节点并且节点名是否为property，然后取出name属性和ref属性），通过ref的值找到对应的对象（<strong>在map中找到那个ref的bean对象，这个叫对象a</strong>），然后给当前bean对象的name属性赋值（<strong>在map中找到当前对象，叫对象b</strong>）。获取当前对象（b）的属性，并改为ref对象（a）的属性。简单来说就是，<strong>引用谁（ref哪个类）要赋给谁（bean中的属性名name）。</strong></p></li><li><p>**在bean类中：Ref  name &#x3D; new ref()**。<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221114152258719.png" alt="image-20221114152258719"></p></li></ul><ol start="3"><li>总结：<strong>控制反转（ioc）和依赖注入（di）</strong>： 以上。</li></ol><h2 id="4-filter过滤器"><a href="#4-filter过滤器" class="headerlink" title="4.filter过滤器"></a>4.filter过滤器</h2><ol><li>在客户端和servlet中间有过滤器<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221116160715963.png" alt="image-20221116160715963">客户端发来请求和接收响应，浏览器执行请求和进行响应都会经过过滤器。</li><li>如何实现过滤器？——&gt; servlet类实现 Filter（注意是javax.servlet.Filter的包），配置<code>@WebFilter(&quot;拦截路径&quot;)</code>也可以在web.xml中添加路径，和servlet一样，只是servlet换成filter。</li><li>如何<strong>放行</strong>？——-&gt;重写doFilter方法，<code>filterChain.doFilter(servletreq..,servletrsp..)</code>然后执行service</li><li>当执行完响应时，又会拦截住，执行<code>filterChain.doFilter</code>这句话之后的代码。</li><li>可以设置通配符，如 *.do ，表示 .do结尾的都拦截。</li><li>过滤器链：过滤器的角色不一样，每个过滤器各司其职。<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221116162920268.png" alt="image-20221116162920268">要配置链的话，<strong>注解按全类名排序顺序，xml配置文件按配置的顺序。</strong></li><li>过滤器的应用：<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221116163631858.png" alt="image-20221116163631858"></li><li>事务管理的应用：</li></ol><ul><li><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221116165721420.png" alt="image-20221116165721420"></p></li><li><p>所以事务管理就不能在dao层进行操作，需要在service层进行管理：<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221116170127588.png" alt="image-20221116170127588"></p></li><li><p>继续将事务管理提前<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221116171002030.png" alt="image-20221116171002030"><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221116171253056.png" alt="image-20221116171253056">因为之前需要同一个connection，所以使用threadlocal来管理，设置好conn，之后get即可。</p></li><li><p>事务管理涉及到的组件：</p><p>OpenSessionInviewFilter<br>TransactionManager</p><p>ThreadLoca</p><p>ConnUtil<br>BaseDAO</p></li></ul><ol start="9"><li>ThreadLocal</li></ol><ul><li>本地线程：我们可以通过set方法在当前线程上存储数据、通过get方法在当前线程上获取数据。get(),set(obj)</li></ul><h3 id="4-01-Listener监听器"><a href="#4-01-Listener监听器" class="headerlink" title="4.01 Listener监听器"></a>4.01 Listener监听器</h3><p>1. </p><ul><li><p>servletContextListener：监听<strong>servletContext对象</strong>的创建和销毁的过程（观察者模式）。</p></li><li><p>HttpSessionListener-监听HttpSession对象的创建和销毁的过程。</p></li><li><p>ServletRequestListener-监听ServletRequest对象的创建和销毁的过程。</p></li></ul><p>2. </p><ul><li>ServletContextAttributeListener-监听ServletContext的保存作用域的改动（add,remove,replace）</li><li>HttpsessionAttributeListener-监听Httpsession的保存作用域的改动(add,remove,replace)</li><li>ServletRequestAttributeListener-监听ServletRequest的保存作用域的改动(add,remove,replace)</li></ul><p>3. </p><ul><li>HttpsessionBindingListener-监听某个对象在Sessioni域中的创建与移除</li><li>HttpSessionActivationListener-监听某个对象在Sessioni域中的序列化和反序列化</li></ul><ol start="4"><li>用哪个listener，servlet实现对应的接口，重写方法，加<code>@WebListener</code>注解，或者在web.xml中配置:<listener>标签。</li><li>监听上下文启动，在上下文启动的时候去创建虹oc容器，然后将其保存到application作用域。后面中央控制器再从application作用域中去获取IOC容器。</li><li><strong>dao组件有多个方法，同一个线程，才能共享数据，可以从线程上面获取。（像旋转火锅）</strong></li></ol><h3 id="4-02大总结"><a href="#4-02大总结" class="headerlink" title="4.02大总结"></a>4.02大总结</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221116214218150.png" alt="image-20221116214218150"></p><h2 id="5-QQZone"><a href="#5-QQZone" class="headerlink" title="5.QQZone"></a>5.QQZone</h2><h2 id="6-书城"><a href="#6-书城" class="headerlink" title="6.书城"></a>6.书城</h2><h2 id="7-Cookie"><a href="#7-Cookie" class="headerlink" title="7.Cookie"></a>7.Cookie</h2><ol><li><p>什么是cookie？—–&gt;浏览器分配给客户端的session id是以cookie的形式保存的。<strong>cookie是在客户端保存数据的，session是在服务器端保存数据的。</strong></p></li><li><p>怎么保存数据？——&gt;创建cookie并保存：<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221114161229856.png" alt="image-20221114161229856"></p></li><li><p>设置cookie的有效时长为60秒：cookie.setMaxAge(60)。</p></li><li><p>cookie的path和domain:随着本地cookie越来越多，每次访问时不能全把cookie带上。浏览器会通过这两个属性和访问地址作比较，从而决定是否携带这个cookie。</p><p><code>cookie.setDomain (pattern);</code><br><code>cookie.setpath(url);</code></p></li><li><p>cookie的应用：记住用户名和密码，免登录等等。注意cookie是保存在本地的，所以最好在自己的设备上保存。</p></li></ol><h3 id="6-kaptcha技术："><a href="#6-kaptcha技术：" class="headerlink" title="6.kaptcha技术："></a>6.kaptcha技术：</h3><ol><li>验证码：为什么需要？—–&gt;防止恶意攻击。</li><li>如何使用？——&gt;在web.xml文件中注册KaptchaServlet，并设置验证码图片的相关属性。</li><li>在html中设置一个img标签，设置src等于KaptchaServlet对应的url-pattern</li><li>kaptcha验证码图片的各个属性在常量接口：Constants中</li><li>KaptchaServlet在生成验证码图片时，会同时将验证码信息保存到session中<br>因此，我们在注册请求时，首先用户文本框中输入的验证码值和session中保存的值进行比较，相等，则进行注册。</li></ol><h2 id="8-正则表达式（8和8以下js）"><a href="#8-正则表达式（8和8以下js）" class="headerlink" title="8.正则表达式（8和8以下js）"></a>8.正则表达式（8和8以下js）</h2><ol><li>定义正则表达式对象：</li></ol><ul><li>对象形式<code>var reg = new RegExp(&quot;abc&quot;)</code></li><li>直接量形式<code>var reg = /abv/</code></li><li>匹配模式：g全局匹配，i忽略大小写匹配，m多行匹配，gim可以组合使用（不区分先后顺序）。<code>var reg = new RegExp(&quot;abc&quot;，&quot;gim&quot;);</code>,<code>var reg = /abv/igm;</code>意思相同。</li></ul><ol><li>定义待校验的字符串</li><li>校验</li><li>元字符：<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221117103833384.png" alt="image-20221117103833384"></li><li>字符集合：<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221117104406045.png" alt="image-20221117104406045">中括号[ ]：若目标字符串有中括号中的<strong>任意一个</strong>就可以匹配。不加中括号必须精确匹配，如&#x2F;abc&#x2F;，目标字符串必须有连续的abc才行。</li></ol><p>​中括号加小尖号^,表示目标字符串有除括号内以外的才匹配。</p><p>-：表示范围，从哪儿到哪儿。</p><ol start="5"><li>出现次数：<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221117105110911.png" alt="image-20221117105110911"></li><li>或者：|</li><li>常用正则表达式：<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221117105612026.png" alt="image-20221117105612026"></li><li>注意：一般使用正则表达式，百度就行。</li></ol><h2 id="9-Vue"><a href="#9-Vue" class="headerlink" title="9.Vue"></a>9.Vue</h2><ol><li><p>传统js创建对象的两种方式：<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221117110334903.png" alt="image-20221117110334903"></p></li><li><p>vue创建对象的的方式：<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221117110634735.png" alt="image-20221117110634735">快速定位操作的对象，省去了传统的获取步骤。</p></li><li><p>绑定元素的属性：v-bind表示绑定value属性，v-bind可以省略，直接写成：  。v-model表示双向绑定：以前msg的值决定输入框的内容，现在v-model可以让输入框的值来改变msg</p></li><li><p>v-model：value可以直接写成，v-model&#x3D;xxx。trim可以去除首尾空格：v-model.trim&#x3D;xxx。输入框内容的首尾空格会被去除掉。</p></li><li><p>v-if,v-else,v-show:if-else可以进行编程操作，但是v-if和v-else之间不能有其他节点。v-show:根据&#x3D;的值的true或false来决定display的值（也就是显示或者不显示）。</p></li><li><p>迭代v-for：语法v-for&#x3D;”xxx in xxx”，for循环。</p></li><li><p>v-on，事件驱动与事件绑定：之前是onclick：”方法”，现在v-on:click&#x3D; “方法”（注意在这儿的方法意思是调用，不能加()，加了括号意思是方法的返回值）。split（”x”）：意思是以x分割，若什么都不写就是把每个字符都分割。v-on:click可以简写为@click</p></li><li><p>&#96;&#96;&#96;js<br>var vue &#x3D; new Vue({<br>data:{&#x2F;&#x2F;自己定义的变量<br>    msg:”hello”<br>}<br>methods:{<br>    xxx:function(){&#x2F;&#x2F;自己定义的方法名<br>        this.msg.spilt(“”).reverse().join(“”)&#x2F;&#x2F;翻转字符串<br>    }<br>}<br>})</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">9. function(event)可以获取鼠标坐标：![image-20221117163406629](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221117163406629.png)</span><br><span class="line"></span><br><span class="line">10. 侦听属性：watch</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">xxx:function(newValue)&#123; //监视xxx这个属性的变化，如果它变了，就继续操作。</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>11.vue对象的生命周期：对象创建之前和之后，数据装配之前之后，数据加载之前之后</p><h2 id="10-Axios"><a href="#10-Axios" class="headerlink" title="10.Axios"></a>10.Axios</h2><ol><li>Axios是Ajax的一个框架，简化Ajax的操作。</li><li>Axios执行Ajax的操作步骤：</li></ol><ul><li><p>添加并引入axios的js文件。</p></li><li><p>客户端向服务器端异步发送参数值。</p></li><li><p>如何发送？——-&gt;前端部分：<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221130190747659.png" alt="image-20221130190747659">后端部分：接收打印<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221130191159733.png" alt="image-20221130191159733"></p></li><li><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221130191328468.png" alt="image-20221130191328468"></p></li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221130191337967.png" alt="image-20221130191337967"></p><ul><li>当点击按钮触发axios时，axios会发送一个带普通请求参数值的异步请求，服务器端接收。</li><li>那么如何进行响应？——&gt;设置编码然后响应<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221130191748047.png" alt="image-20221130191748047"></li><li><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221130192047993.png" alt="image-20221130192047993">前端接收打印结果（成功响应时进行，否则catch），有问题会执行catch（异常处理)。</li></ul><ol start="3"><li>发送的请求体是json格式（客户端向服务器发送的是json格式的数据）：</li></ol><ul><li>json：是一种数据格式，kv值显示，有点类似python的字典。json表达数据更简单。json很灵活，内容可以是各种数据类型，可以是对象，可以是json嵌套。<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221130204753250.png" alt="image-20221130204753250"></li><li>重点：<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221130211007627.png" alt="image-20221130211007627"></li><li>如何使用：<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221130210828093.png" alt="image-20221130210828093"></li><li>若user是从数据库查出来的，需要将java对象转换为json格式的字符串，响应给客户端<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221130211646041.png" alt="image-20221130211646041">mime-type是告诉浏览器响应的是什么数据。</li><li><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221130212114478.png" alt="image-20221130212114478"><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221130212304770.png" alt="image-20221130212304770"><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221130212330368.png" alt="image-20221130212330368"></li><li>前后端分离：<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221130212431746.png" alt="image-20221130212431746"></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hsp JavaSE复习</title>
      <link href="/2022/12/23/JavaSE%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/12/23/JavaSE%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JavaSE复习"><a href="#JavaSE复习" class="headerlink" title="JavaSE复习"></a>JavaSE复习</h1><hr><h2 id="1-对象的多态（核心，重点）"><a href="#1-对象的多态（核心，重点）" class="headerlink" title="1.对象的多态（核心，重点）"></a>1.对象的多态（核心，重点）</h2><p><strong>1.对象编译类型和运行类型可以不一致，<em>可以让父类的引用指向子类的对象</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br></pre></td></tr></table></figure><p><em>等号左边编译类型，右边运行类型</em>（编译就是javac的时候，运行就是真正运行的时候）</p><p><strong>2.编译类型在定义对象时就确定了，不能改变</strong></p><p>3.可以在形参列表直接声明父类引用，将子类对象传进去</p><hr><p>4.向上转型：父类的引用指向子类的对象（向上转型的本质），可以调用父类的所有成员（遵守访问权限），但是不能调用子类的成员</p><p>因为在编译阶段，（声明好了），能调用哪些成员，由编译类型决定。运行结果看子类，从子类开始查找方法并调用</p><hr><p>5.向下转型：子类类型  引用名 &#x3D;  （子类类型） 父类引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span>(Cat) animal;</span><br></pre></td></tr></table></figure><p>只能强转父类引用，不能强转父类对象（因为对象已经在内存创建好了）</p><p>父类引用必需指向当前目标类型的对象(也就是说必须满足下面条件为前提，才能向上面那样写)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br></pre></td></tr></table></figure><p>向下转型后就可以调用子类类型中的所有成员</p><hr><p>6.属性重写问题：属性没有重写一说，属性就看编译类型就行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>脑筋急转弯</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Base</span> <span class="variable">base</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line">System.out.println(base.count);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123; <span class="comment">//父类</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">//属性 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;<span class="comment">//子类 </span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="comment">//属性 &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果为10，因为属性看编译类型</p><p>7.instanceOf    用来判断<em><strong>对象的运行类型</strong></em>是不是某某类型或者是不是某某类型的子类类型</p><hr><h2 id="2-动态绑定机制-p315（非常重要）"><a href="#2-动态绑定机制-p315（非常重要）" class="headerlink" title="2.动态绑定机制 p315（非常重要）"></a>2.动态绑定机制 p315（非常重要）</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221015170815917.png" alt="image-20221015170815917"></p><ol><li><p>a的编译类型是A，运行类型是B，<em>当将B类的sum()方法注释掉时</em>，会自动找其父类A的sum()方法。</p></li><li><p>但是父类sum()方法中有调用一个getI方法，这时动态绑定（运用第一条机制，对象a和运行类型B绑定），会调用子类的getI方法。</p></li><li><p>但是子类（B类）的getI方法return i是return的B类定义的i（20），运用第二条机制，属性没有动态绑定，哪里声明，哪里使用。</p></li></ol><hr><h2 id="3-断点调试"><a href="#3-断点调试" class="headerlink" title="3.断点调试"></a>3.断点调试</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221015193625682.png" alt="image-20221015193625682"></p><ol><li><p>断点调试是在程序运行的状态下</p></li><li><ul><li><p>F7(跳入) F8(跳过) </p></li><li><p>shift+F8(跳出) F9(resume,执行到下一个断点)</p></li><li><p>F7：跳入方法内</p></li><li><p>F8: 逐行执行代码</p></li><li><p>shift+F8: 跳出方法</p></li></ul></li><li><p>图片从左到右：逐行执行（F8），进入到方法体内（F7），强制进入方法体内（alt+shift+F7），跳出方法（shift+F8）</p></li><li><p>左边从上到下：resume,执行到下一个断点（F9），stop</p></li><li><p>追源代码：有些jdk源码进不去，可以强制进去。</p></li><li><p>支持动态下断点：在程序运行过程中还可以下断点。</p></li></ol><hr><h2 id="4-Java反射机制"><a href="#4-Java反射机制" class="headerlink" title="4.Java反射机制"></a>4.Java反射机制</h2><ol><li><p>需求引出反射：根据properties配置文件的指定信息，创建对象并调用方法。</p></li><li><ul><li><p>首先要io流接收到类的路径，第一步，加载类，返回Class类型的对象cls</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(classfullpath);</span><br></pre></td></tr></table></figure></li><li><p>通过 cls 获取你加载得到的类的对象实例:此时的o的运行类型是cat</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> cls.newInstance();</span><br></pre></td></tr></table></figure></li><li><p>通过cls获取你加载得到的类的  <em>方法名字</em> ，来找到对应的方法对象（在反射机制中，方法也可以看作对象）（io流获得的方法名传入）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">method1</span> <span class="operator">=</span> cls.getMethod(methodName);</span><br></pre></td></tr></table></figure></li><li><p>通过method1调用方法：即通过方法的对象来实现调用方法。</p></li><li><p>传统方法<code>对象.方法()</code>，反射机制<code>方法.invoke(对象)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">method1.invoke(o);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>总结：框架&#x3D;反射+注解+设计模式，在不修改源码的情况下控制程序，符合设计模式的ocp原则（开闭原则：不修改源码，扩展功能）</p></li><li><p>反射原理图：</p></li></ol><ul><li><p>反射原理：执行期间借助于Reflection API取得任何类的内部信息（成员变量，构造器，成员方法），并能操作对象的属性和方法。</p></li><li><p>在加载类过后，堆中就会产生相应的Class类型的对象（一个类只有一个class对象），这个对象包含了类的完整结构信息。通过这个对象看到类的结构，就像镜子一样，故得名：<em>反射</em> 。</p></li><li><p>原理图：<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221104110317798.png" alt="image-20221104110317798"></p></li><li><p>java反射的功能：</p><p>1.在运行时判断任意一个对象所属的类<br>2.在运行时构造任意一个类的对象<br>3.在运行时得到任意一个类所具有的成员变量和方法<br>4.在运行时调用任意一个对象的成员变量和方法<br>5.生成动态代理</p></li><li><p>反射相关的类：<br>1.java.lang.Class:代表一个类，Class对象表示某个类加载后在堆中的对象<br>2.java.lang.reflect.Method:代表类的方法，Method对象表示某个类的方法<br>3.java.lang.reflect.Field:代表类的成员变量（字段），Fild对象代表某个类的成员变量<br>4.java.lang.reflect.Constructor:代表类的构造方法，.Constructor代表某个类的构造方法<br>这些类在java.lang.reflection</p></li><li><p>cls.getConstructor(String.class)&#x2F;&#x2F;这里老师传入的String.classs，就是String类的Class对象，可以获得含参构造器</p></li></ul><ol start="5"><li>反射调用优化：<ul><li>优点：可以动态的创建和使用对象（也是框架底层核心），使用灵活，没有反射机<br>制，框架技术就失去底层支撑。</li><li>缺点：使用反射基本是解释执行，对执行速度有影响。</li><li>优化，method，field，constructor对象都有setAccessible()方法。这个方法的作用是启动和禁用访问安全检查的开关：参数为true，反射的对象在使用时取消访问检查，提高反射效率。参数值为false表示反射的对象执行访问检查。</li></ul></li><li>Class类分析：<ul><li>Class也是类，继承了了Obejct类。</li><li>Class类不是new出来的，而是系统ClassLoder类的loadClass方法创建出来的。无论是new还是反射底层都会调用这一方法。</li><li>对于某个类的Class类对象，在内存中只有一份，因为类只加载一次。</li><li>每个对象实例都会记得自己由哪个Class实例所生成。</li><li>通过Class类可以完整的得到一个类的结构，通过一系列api</li><li>常用方法：<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13671/image-20221105101132831.png" alt="image-20221105101132831"></li><li>Class对象是存放在堆的</li><li>类的字节码二进制数据，是放在方法区的，有的地方称为类的元数据（包括方法代码，变量名，方法名，访问权限）</li></ul></li><li>获取Class对象的六种方式：<ul><li>代码阶段：主要是通过<code>Class.forname(全类名)</code>获取。<em>前提</em>：已知一个类的全类名，且该类在类路径下。<em>场景</em>：多用于配置文件，读取类的全路径，加载类。</li><li>类加载阶段：通过<code>类.class</code>。该方式安全可靠，程序性能最高。<em>场景</em>：多用于参数传递，比如通过反射得到对应构造器对象。</li><li>运行阶段：<code>对象.getClass()</code>。</li><li>还可以类加载器获取0717</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
